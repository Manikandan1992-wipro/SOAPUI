/*
* This script is to read the test data if the context variables are null and stores into context varaibles workBookData,workBookHeaders
*/

import jxl.*

/*
*Initialising the variables
*/

def groovyUtils =new com.eviware.soapui.support.GroovyUtils(context)
//def projectPath  = "F:\\Thilak\\web services"
log.info groovyUtils.projectPath
def projectPath =groovyUtils.projectPath
log.info groovyUtils.projectPath
def workBookData = new Hashtable()
def workBookHeaders = new Hashtable()
def inputData= new Hashtable()
def inputHeaders= new Hashtable()

try{
/*
* Checcking context variables null or not
* If this condition  is true will read the test data and stores the data in context variables workBookData,workBookHeaders
*If this condition is false willreuse the already read data at test suite level from context variables
*/

if(context.getProperty("workBookData")==null|| context.getProperty("workBookHeaders")==null){
log.info "First Time  reading the workbook!!"
//Initialising the required varaibles

def testData =testRunner.testCase.testSuite.project.getPropertyValue("TestDataFolder")
log.info testData
def testDataWorkBook =testRunner.testCase.testSuite.project.getPropertyValue("InputFileName")
log.info testDataWorkBook
def filePath = projectPath+"\\"+testData+"\\"+testDataWorkBook
log.info filePath
Workbook workBook = Workbook.getWorkbook(new File(filePath))
log.info workBook
def listNm=""
def headingNm =""
int columns=0
int rows=0
Sheet sheet
context.setProperty("workBookData",workBookData)
context.setProperty("workBookHeaders",workBookHeaders)

String [] sheetNames=workBook.getSheetNames()
log.info "+Test+" + sheetNames

/*Excluding the specific sheets whaich are in test data
*/ 
String excludesheetNames=testRunner.testCase.testSuite.project.getPropertyValue("ExcludeTestDataSheetNames")
log.info excludesheetNames
/*
*Looping thru tet data worksheets  to read the data
*/

for(int i=0;i<workBook.getNumberOfSheets();i++){
tempInputList=[]
if(!excludesheetNames.contains(sheetNames[i].toString())){
inputSheet=workBook.getSheet(""+testRunner.testCase.testSuite.getPropertyValue("InputSheet").toString())

/*Varied input sheets */
sheet =workBook.getSheet(i)

columns =sheet.getColumns()

rows =sheet.getRows()

context.setProperty("inputSheet",inputSheet)
context.setProperty("sheet",sheet)
context.setProperty("columns",columns)
context.setProperty("rows",rows)
inputSheetName ="inputSheetData" +i
inputSheetHeadersName="inputSheetHeadersName"+i

try{
/*
* Calling the method readDataFromSheet
*/

tempInputList =readDataFromSheet(inputSheetHeadersName)
//log.info "Sant" + tempInputList
}catch(e){
log.error e
}

/*
*Putting the list in workBookData  hash table  with the key inputSheetName
*/

workBookData.put(inputSheetName,tempInputList)
context.setProperty("workBookData",workBookData)
	}
}

/* 
* Initialising  the workBookData,workBookHeaders context variables
*/

def wBookData=context.getProperty("workBookData")
def wBookHeaders=context.getProperty("workBookHeaders")

def keys =wBookData.keySet()
def keyiterator = keys.iterator()
def sh1
for(String key:keys){
def sheet1=wBookData.get(key)
sh1=[]
Iterator<String> iter1 =sheet1.iterator()
while(iter1.hasNext()){
String str =iter1.next();
if(str.contains(testRunner.testCase.name)){
sh1.add(str)
}
}
inputData.put(key,sh1)
log.info "yaaru sh1"+ sh1.size
context.setProperty("noOfTCs",sh1.size())

}
/*
*storing to context variables
*/

context.setProperty("inputData",inputData)
context.setProperty("inputHeaders",wBookHeaders)
context.setProperty("inputIndex",0)
context.setProperty("testSCeRow",null)
}}
catch(Exception e){
log.error e
assert l==2
}
/* 
*This method returns a list by taking parameter inputsheetheadersname
*/

def readDataFromSheet(inputSheetHeadersName){

/*
*Initialising the required variables
*/

int count =0
def configIndustry=testRunner.testCase.testSuite.project.getPropertyValue("Run_Industry").toLowerCase()
def certFlag=testRunner.testCase.testSuite.project.getPropertyValue("CERTFlag").toLowerCase()
def smokeTestFlag=testRunner.testCase.testSuite.project.getPropertyValue("SmokeTestFlag").toLowerCase()
def columns =context.getProperty("columns")
def rows=context.getProperty("rows")
Sheet sheet=context.getProperty("sheet")
Sheet inputSheet= context.getProperty("inputSheet")
workBookHeaders= context.getProperty("workBookHeaders")
def listOfRows=[]
String cellData
String line=""
/* 
*getting the sheet first row headers and adding to list
*/
Cell[] rowCells =sheet.getRow(0)
log.info "Santa"+ rowCells
for(Cell cell:rowCells){
cellData =cell.getContents().toString()
//log.info "gumgumalu"+cellData
int col =cell.getColumn()
if(cellData.equalsIgnoreCase("RunRow")){
context.setProperty("runRowColumn",col)
}
else if(cellData.equalsIgnoreCase("RunCert")){
context.setProperty("runCertColumn",col)
}
else if(cellData.equalsIgnoreCase("RunSmoke")){
context.setProperty("runSmokeColumn",col)
}
else if(cellData.equalsIgnoreCase("TestScenario_ID")&&context.getProperty("testScenarioColumn")==null){
context.setProperty("testScenarioColumn",col)
}
else if(cellData.equalsIgnoreCase("Industry")){
context.setProperty("industryColumn",col)
}



if(cellData ==""){
cellData=" "
}
if (line==""){
line+=cellData
}else{ line+="~"+cellData}
}
def runRowColumn =context.getProperty("runRowColumn")
def runCertColumn =context.getProperty("runcertColumn")
def runSmokeColumn =context.getProperty("runSmokeColumn")
def testScenarioColumn =context.getProperty("testScenarioColumn")
def industryColumn=context.getProperty("industryColumn")
workBookHeaders.put(inputSheetHeadersName,line)
line="";
boolean executeRowFlag =false;
int testSceRow=0
if(context.getProperty("testSceRow")!=null){
testSceRow=context.getProperty("testSceRow")
}

/*
*Looping thru the test data input and putting the workBookHeaders table
/*
 * 
 */
for(int row= testSceRow; row<rows;row++){
runRow=inputSheet.getCell(runRowColumn,row).getContents().trim()
log.info "what is row numv"+row
if(runCertColumn!=null)
runCert=inputSheet.getCell(runCertColumn,row).getContents().trim()
else
runCert="false"
if(runSmokeColumn!=null)
runSmoke=inputSheet.getCell(runSmokeColumn,row).getContents().trim()
else
runSmoke="false"
if(industryColumn!=null)
tCIndustry=inputSheet.getCell(industryColumn,row).getContents().trim().toLowerCase()
else
tCIndustry=configIndustry
String testDataTestSceId=inputSheet.getCell(testScenarioColumn,row).getContents().trim()

if(context.getProperty("testSceRow")== null)

context.setProperty("testSceRow",row)
try{
executeRowFlag =executeRow(configIndustry.contains(tCIndustry),certFlag,smokeTestFlag,runRow,runCert,runSmoke)
}catch(e){
log.error e
}
if(executeRowFlag){
rowCells=sheet.getRow(row)
for (Cell cell:rowCells){
	cellData =cell.getContents().toString()
	if(cellData==""){
		cellData=" "
	}
	if(line==""){
		line+=cellData
	}
	else
		line+="~" +cellData
	
}
listOfRows[count]=line
line=""
count++

}
}
return listOfRows
}
/*
* This method returns  boolean value by taking string parameters tCIndustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke 
*/
def executeRow (tCIindustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke){

boolean exeRow =true
if(!smokeTestFlag.equalsIgnoreCase("true")){
	if(tCIindustry==true){
		if(certFlag.equals("true")&& (runCert.equals("")||runCert.equals("false"))){
			exeRow=false
		}
		else if(certFlag.equals("false")&& runRow.equals("false")){
			exeRow=false
		}
	}else{
		exeRow=false
	}
}
else{
	if(runSmoke.equals("true")){
		if(tCIindustry==false){
			exeRow=false
		}
		
	}else if (runSmoke.equals("false")||runSmoke.equals("")){
		exeRow=false
	}
}
return exeRow
}


 
