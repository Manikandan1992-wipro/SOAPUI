/*
* This script is to read the next row from context variables and sets the same in test case properties
*/
/*
* Intializing the variables
*/
def callingTC = testRunner.getTestCase();
def inputTokens = []
def assertTokens = []
def headerTokens= []
def inputIndex = context.getProperty("inputIndex")
def inputData = context.getProperty("inputData")
def inputHeaders = context.getProperty("workBookHeaders")
def noOfTCs= context.getProperty("noOfTCs")
log.info "ethana test case" + noOfTCs

/*
* Checking workBookHeaders, inputData, noOfTCs
*/

try{
	
	if (context.getProperty("workBookHeaders") != null && context.getProperty("inputData") != null && noOfTCs !=0){
	log.info "wbheadr value"+ context.getProperty("workBookHeaders")
	log.info "wbheadr value"+ context.getProperty("inputData")
	log.info "wbheadr value"+ noOfTCs
/*
* Initializing the variables and getting the header values
*/
		def s=0;
		def headerKeys = inputHeaders.keySet()
		def headerIterator = headerKeys.iterator()
		while (headerIterator.hasNext()){
			headerTokens[s] = inputHeaders.get(headerIterator.next()).split("~")
			s++
		}
		/*
		 Intializing the variables and getting the input data values
		 */
		s=0;
		def inputKeys = inputData.keySet()
		def inputIterator = inputKeys.iterator()
		while (inputIterator.hasNext()){
		inputTokens[s] = (inputData.get(inputIterator.next()))[inputIndex].split("~")	
		s++
		}
		/*
		 * setting the headers as property name and input data as values to property
		 */
		def len = headerTokens.size()
		for(int i=0; i<len; i++){
			def innerLen = headerTokens[i].length
			for (int j=0 ; j<innerLen; j++){
				callingTC.setPropertyValue(headerTokens[i][j].trim(), inputTokens[i][j].trim())
			}
	}
		
}
/*
 * checking the number of test cases to be executed and diverting the executiob to loop
 */
else if (noOfTCs == 0){
	log.info "noOfTCs value is " + noOfTCs + " !! "
	testRunner.gotoStepByName("Loop")
}else{
	log.info "Issue while Reading the Test Data!!"
	testRunner.gotoStepByName("Loop")
}
}
catch(Exception e){
	log.error e
	testRunner.gotoStepByName("Loop")
	assert 1==2
}


