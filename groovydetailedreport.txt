
//log.info "Test"
import java.math.*;
import jxl.*
import java.util.*;
import groovy.util.*

	//log,info"check"
def testCasename = testRunner.testCase.name

groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStepStatus =[];
Date date = new Date()
def dateTime
dateTime = date.format('ddMMyy_hhmmss_S').toString()

double currtime = testRunner.timeTaken;
double time =0.00;
prevTime =0.00;

//calculating test case execution time
if(context.testCaseTimeTaken != null && context.testcaseStatus.size() > 0 && context.inputIndex !=0)
{
	time = currtime - context.prevTime;
}else{
	time = currtime;
}

//Convertint the time into two digit number
double seconds = (time/1000);
try{
	seconds = seconds.round(2);
}catch(e){
	log.info "error: " +e
}

/// Creating a Reports folder if it's not exists
def results = testRunner.results
def resultDir = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ReportsFolderName"));
if(!resultDir.exists())
{
		resultDir.mkdir();
}

//Incrementing the InputIndex value
inputIndex = context.inputIndex;
inputIndex = inputIndex+1;


def detailedReportFileName = context.detailedReportFileName;
Writer writer=null;

//checking detailed report file is already created or not
if(detailedReportFileName == null){
	try
	{
		context.testSteps=0
		context.runners = []
		context.testcasenames = []
		context.testcasedescription = []
		context.filenames = []
		context.testcaseStatus = []
		context.testcaseTimeTaken = []
		context.rowIndex = []
		context.prevTime = 0.00
		context.rowStepCount = 1;

		//Intializing Detailed report
		context.detailedReportFileName = testRunner.testCase.testSuite.name.replace(" ","_")+"_Detailed_Report_"+dateTime +".html";
		log.info "initialising the html report"
		File file = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ProjectReportFolderName")+
		"/"+testRunner.testCase.testSuite.project.name+"/"+context.detailedReportFileName);
		try{
		writer = new FileWriter(file, true);
		}
		catch(Throwable e){
			log.info "writer is not working"+e;
		}

		writer.write("<html>")
		writer.write("<Table border=0 cellSpacing=1 cellPadding=1 width='100%>")
		writer.write("<tr>")
		writer.write("<TD align='left'>")
		//Writer.write("<TD align=right'><img src= '"+groovyUtils.projectPath+"/Logos/Client.jpg' alt='HPS' height='50' width='150'/></TD>")
		writer.write("<TD align='center'><H4 align='center'><font color='660066' face='arial' color='#E0E0E0' size=5><b>Execution Detailed Report</b></font></H4></TD>")
		//Writer.write("<TD align='right'><img src= '"+groovyUtils.projectPath+"/Logos/Cigniti.jpg' alt='Cigniti' height='50' width='150'/>>/TD")
		writer.write("</tr></table>")
		if(null!=context.filenames)
		{
			context.filenames.add("../"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName+"#"+testRunner.testCase.getPropertyValue("Row_Index").toString())
		}
	}catch (Throwable e)
		{
			log.info "error: "+e;
		}
	}
	else
	{
		try
		{
			File file1 = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ProjectReportFolderName")+"/"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName);
			writer = new FileWriter(file1,true);
			if(null!=context.filenames)
			{
				context.filenames.add("../"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName+"#"+testRunner.testCase.getPropertyValue("RowIndex").toString())
			}
		}
		catch (Throwable e)
		{
			log.info "error: "+e;
		}
	}

	try
	{
		writer.write("<TABLE align=center width=80%><tr><td>")
		writer.write("<TABLE id="+testRunner.testCase.getPropertyValue("Row_Index").toString()+" align=center border=1 cellSpacing=1 cellPadding=1 width=100% font=Arial style=margin-top:60px>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 style=Arial><a name=1></a><B>Test Scenario Name</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("TestScenario_ID").toString())
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>TestCase Description</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("TestScenario_DetailedDescription").toString()+"</b></font></th>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><B>Row Index</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("Row_Index").toString()+"</b></font></th>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><B>Execution Time(Sec)</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+seconds+"</b></font></th>")
		writer.write("</table></tr></td><tr><td>")

		writer.write("<TABLE align=center border=1 cellSpacing=1 cellPadding=1 width=100% font=Arial>")
		writer.write("<tr>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Step No</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Step</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Request</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Response</b></font></th>")
		writer.write("<TH bgcolor=#153e7e width=10% align=middle><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Status</b></font></th>")
	}
	
	catch (Throwable e)
		{
			log.info "error: "+e;
		}

boolean flag = false;
intLoopCount1=0;
rowStepCount1 = context.testSteps;

//Looping through results (test Steps)
for( r in testRunner.results )
{
	log.info "inside the test runner r for loop"
	if ( intLoopCount1 >= rowStepCount1)
	{
		if(r.status.toString() != 'OK' && flag == false)
		{
			flag=true;
writer.write("<TH bgcolor=#153e7e align =middle><FONT color =#e0e0e0 size =2 face= Arial><B>Reason</b></font></th>")
}
}
intLoopCount1=intLoopCount1+1;
}
try{
	log.info "inside the try line 159"
writer.write("</tr>")
boolean firstLoop =true;
stepCount=1;
intLoopCount=0;
//def testStepStatus =[];
rowStepCount = context.testSteps;
for(r in testRunner.results)
{
	log.info "inside the second tesrunner results for"
	log.info "value of r" +r;
	log.info "value of intcount"+intLoopCount
	log.info "value of rowStepCount"+rowStepCount
	
if(intLoopCount >= rowStepCount)
{
log.info "inside intloopcount>=rowstepcount"
if( r.getTestStep().config.type=="request" || r.getTestStep().config.type == "restrequest" || r.status.toString()== "FAILED" )
//if(r.testStep.name.toString()!="ReadData"||r.testStep.name.toString()!="LoadRow"||r.testStep.name.toString()!="Loop"||r.testStep.name.toString()!="ReadData"||r.testStep.name.toString()!="LoadRow"||r.testStep.name.toString()!="Delay")
{
log.info "inside going to long if"
writer.write("<tr>")
writer.write("<td align =middle><font color=#153e7e size=2 style=Arial>")
writer.write("step"+stepCount)
writer.write("</font></td>")
writer.write("<td align=left><font color=#153e7e size=2 style=Arial>")
writer.write(r.testStep.name)
writer.write("</font></td>")

def testStep =r.getTestStep();
if(testStep.config.type=="request"|| testStep.config.type=="restrequest")
{
try{
log.info "inside the raw request condition "
def rawRequest=new String(r.rawRequestData);
def rawResponse =new String(r.rawResponseData);

writer.write("<td align=left><font color=#153e7e size=2 style=Arial>")
writer.write("<textarea rows ='20' cols ='40'  style= 'border:none;'>"+ rawRequest+"</textarea>")
writer.write("</font></td>")
writer.write("<td>")
writer.write("<textarea rows ='20' cols ='40'  style= 'border:none;'>"+ rawResponse+"</textarea>")
writer.write("</td>")
}
catch(e){
log.info "error:"+e;
writer.write("<td align=left><font color =#153e7e size=2 style =Arial>")
writer.write("</td>")
writer.write("<td><font color =153e7e size=Arial><font>")
writer.write("</td>")
}
}
else{
	log.info "else part of teststepconfig"
writer.write("<td><font color=#153e7e size=2 style=Arial></font>")
writer.write("<td>")
writer.write("<td><font color=#153e7e size=2 style=Arial></font>")
writer.write("<td>")
}
if(r.status.toString()=="OK" || r.status.toString()=="UNKNOWN")
{
log.info "inside r status=ok"
testStepStatus.add("PASSED")
writer.write("<td width='10%' bgcolor=green align =center><font color=white size =2 style=Arail>")
writer.write("PASSED")
if(flag == true){
	writer.write("</td><font color=#153e7e size=2 style=Arial>")
     writer.write("</font></td>")
}
}
else
{
	log.info"else failed block line 231"
testStepStatus.add("FAILED")
writer.write("<td width ='10%' bgcolor=red align= center><font color=white size=2 style=Arial>")
writer.write(r.status.toString())
writer.write("</td><td align=left><font color=Red size=2 style Arial>")
if(testStep.config.type=="groovy" && context.dBvalidationReason != "" && r.getTestStep().name.toString().contains("Table"))
{
writer.write(context.dBValidationReason)
}
try{
if(testStep.config.type=="request" || testStep.config.type=="restrequest")
{
def error=null;
def errorMessage ="";
Assertioncounter=testStep.getAssertionList().size();
for(AssertionCount in 0..Assertioncounter-1){
if( testStep.getAssertionAt(AssertionCount).getStatus().toString()=="FAILED"){
error=testStep.getAssertionAt(AssertionCount).getErrors()
for (err in error)
{
errorMessage += "<br>"+err.toString()+"; </br>"
}
}
}
writer.write(errorMessage)
}
}
catch(e){
log.info"error:"+e;
writer.write("ERROR: Exception in Request: java.net.soceketTimeoutException:Read timed out");
}
}
writer.write("</font></td>")
writer.write("</tr>")
stepCount =stepCount + 1
}
}
intLoopCount = intLoopCount+1;
}
context.testSteps = testRunner.results.size();
}
catch(Throwable e){
log.info"error:"+e;
}

finally{
writer.write("</table>")
writer.write("</tr></td></table>")
writer.write("<a href ='#top' align='right'><FONT color=#153e7e size=2 face=arial><b>Back to Top</></font></a>")
writer.write("<br/>")
writer.flush();
writer.close();
log.info "inside if after finally block"
if(null!=context.testcaseStatus)
{
log.info "inside if after"	
if(testStepStatus.contains("FAILED"))
{
context.testcaseStatus.add("FAILED")
}
else
{
context.testcaseStatus.add("PASSED")
}
context.testcasedescription.add(testRunner.testCase.getPropertyValue("TestScenario_DetailedDescription"))
}
if(null!=context.testcaseTimeTaken)
{
context.testcaseTimeTaken.add(seconds);
context.prevTime=testRunner.timeTaken;
}
if(null!=context.rowindex)
{
context.rowIndex.add(testRunner.testCase.getPrtopertyValue("Row_Index"));
}
if(null!=context.testcasenames)
{
context.testcasenames.add(testCasename);
}
}
