<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="db1edfdc-e064-47fa-b1d5-14467a17435f" activeEnvironment="Default" name="test" resourceRoot="" soapui-version="5.4.0" abortOnError="false" runType="SEQUENTIAL" defaultScriptLanguage="Groovy" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" id="31aa0c04-5958-4c8c-a363-a8d360bafee9" wsaVersion="NONE" name="ICalculator" type="wsdl" bindingName="{http://www.parasoft.com/wsdl/calculator/}ICalculator" soapVersion="1_1" anonymous="optional" definition="file:/E:/Santhosh/Web%20Services/rrr.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:\E:\Santhosh\Web%20Services\rrr.wsdl"><con:part><con:url>file:\E:\Santhosh\Web%20Services\rrr.wsdl</con:url><con:content><![CDATA[<wsdl:definitions name="Calculator" targetNamespace="http://www.parasoft.com/wsdl/calculator/" xmlns:http="http://schemas.xmlsoap.org/wsdl/http/" xmlns:mime="http://schemas.xmlsoap.org/wsdl/mime/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:soap12="http://schemas.xmlsoap.org/wsdl/soap12/" xmlns:soapenc="http://schemas.xmlsoap.org/soap/encoding/" xmlns:tme="http://www.themindelectric.com/" xmlns:tns="http://www.parasoft.com/wsdl/calculator/" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <wsdl:types>
    <xsd:schema elementFormDefault="qualified" targetNamespace="http://www.parasoft.com/wsdl/calculator/">
      <xsd:element name="add">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="x" type="xsd:float"/>
            <xsd:element name="y" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="addResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Result" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="divide">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="numerator" type="xsd:float"/>
            <xsd:element name="denominator" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="divideResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Result" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="multiply">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="x" type="xsd:float"/>
            <xsd:element name="y" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="multiplyResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Result" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="subtract">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="x" type="xsd:float"/>
            <xsd:element name="y" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
      <xsd:element name="subtractResponse">
        <xsd:complexType>
          <xsd:sequence>
            <xsd:element name="Result" type="xsd:float"/>
          </xsd:sequence>
        </xsd:complexType>
      </xsd:element>
    </xsd:schema>
  </wsdl:types>
  <wsdl:message name="add0In">
    <wsdl:part element="tns:add" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="add0Out">
    <wsdl:part element="tns:addResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="divide1In">
    <wsdl:part element="tns:divide" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="divide1Out">
    <wsdl:part element="tns:divideResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="multiply2In">
    <wsdl:part element="tns:multiply" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="multiply2Out">
    <wsdl:part element="tns:multiplyResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="subtract3In">
    <wsdl:part element="tns:subtract" name="parameters"/>
  </wsdl:message>
  <wsdl:message name="subtract3Out">
    <wsdl:part element="tns:subtractResponse" name="parameters"/>
  </wsdl:message>
  <wsdl:portType name="ICalculator">
    <wsdl:operation name="add" parameterOrder="x y">
      <wsdl:input message="tns:add0In" name="add0In"/>
      <wsdl:output message="tns:add0Out" name="add0Out"/>
    </wsdl:operation>
    <wsdl:operation name="divide" parameterOrder="numerator denominator">
      <wsdl:input message="tns:divide1In" name="divide1In"/>
      <wsdl:output message="tns:divide1Out" name="divide1Out"/>
    </wsdl:operation>
    <wsdl:operation name="multiply" parameterOrder="x y">
      <wsdl:input message="tns:multiply2In" name="multiply2In"/>
      <wsdl:output message="tns:multiply2Out" name="multiply2Out"/>
    </wsdl:operation>
    <wsdl:operation name="subtract" parameterOrder="x y">
      <wsdl:input message="tns:subtract3In" name="subtract3In"/>
      <wsdl:output message="tns:subtract3Out" name="subtract3Out"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="ICalculator" type="tns:ICalculator">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="add">
      <soap:operation soapAction="add" style="document"/>
      <wsdl:input name="add0In">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="add0Out">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="divide">
      <soap:operation soapAction="divide" style="document"/>
      <wsdl:input name="divide1In">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="divide1Out">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="multiply">
      <soap:operation soapAction="multiply" style="document"/>
      <wsdl:input name="multiply2In">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="multiply2Out">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
    <wsdl:operation name="subtract">
      <soap:operation soapAction="subtract" style="document"/>
      <wsdl:input name="subtract3In">
        <soap:body use="literal"/>
      </wsdl:input>
      <wsdl:output name="subtract3Out">
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="Calculator">
    <wsdl:documentation>instance of class webtool.soap.examples.calculator.Calculator</wsdl:documentation>
    <wsdl:port binding="tns:ICalculator" name="ICalculator">
      <soap:address location="http://ws1.parasoft.com/glue/calculator"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint></con:endpoints><con:operation id="c8dc3da7-02e2-46fa-9347-bf6c4f43e957" isOneWay="false" action="add" name="add" bindingOperationName="add" type="Request-Response" outputName="add0Out" inputName="add0In" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="2231b98f-dfd4-4867-a862-53064d532966" name="Request 1"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:add>\r
         <cal:x>?</cal:x>\r
         <cal:y>?</cal:y>\r
      </cal:add>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="add"/><con:wsrmConfig version="1.2"/></con:call></con:operation><con:operation id="863a9ab0-40ca-4f1c-b37d-e3fcc54e0f98" isOneWay="false" action="divide" name="divide" bindingOperationName="divide" type="Request-Response" outputName="divide1Out" inputName="divide1In" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="575ddac1-1724-47bc-a1bb-426015421295" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:divide>\r
         <cal:numerator>?</cal:numerator>\r
         <cal:denominator>?</cal:denominator>\r
      </cal:divide>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="divide"/></con:call></con:operation><con:operation id="13c0ec61-2a3c-44d4-bba1-2832724ef251" isOneWay="false" action="multiply" name="multiply" bindingOperationName="multiply" type="Request-Response" outputName="multiply2Out" inputName="multiply2In" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="b56e5b55-789d-4fe9-808d-21e809476a6d" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:multiply>\r
         <cal:x>?</cal:x>\r
         <cal:y>?</cal:y>\r
      </cal:multiply>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="multiply"/></con:call></con:operation><con:operation id="5ad7c0d3-8c60-4728-b56d-e99f19acdd8e" isOneWay="false" action="subtract" name="subtract" bindingOperationName="subtract" type="Request-Response" outputName="subtract3Out" inputName="subtract3In" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call id="d29bddce-67a5-47e2-81d7-456f58491cb6" name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:subtract>\r
         <cal:x>?</cal:x>\r
         <cal:y>?</cal:y>\r
      </cal:subtract>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:wsaConfig mustUnderstand="NONE" version="200508" action="subtract"/></con:call></con:operation></con:interface><con:testSuite id="11f12ee8-d13d-4596-8ce1-a561dd7ab20c" name="Calculator"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="8b519ab2-b7dd-4b4b-af50-7885c5b58682" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC01_Add-positive scenario" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="ReadData" id="80ef0b8d-4be6-4a1a-8aa1-e1cca0616983"><con:settings/><con:config><script><![CDATA[/*
* This script is to read the test data if the context variables are null and stores into context varaibles workBookData,workBookHeaders
*/

import jxl.*

/*
*Initialising the variables
*/

def groovyUtils =new com.eviware.soapui.support.GroovyUtils(context)
//def projectPath  = "F:\\Thilak\\web services"
log.info groovyUtils.projectPath
def projectPath =groovyUtils.projectPath
log.info groovyUtils.projectPath
def workBookData = new Hashtable()
def workBookHeaders = new Hashtable()
def inputData= new Hashtable()
def inputHeaders= new Hashtable()

try{
/*
* Checcking context variables null or not
* If this condition  is true will read the test data and stores the data in context variables workBookData,workBookHeaders
*If this condition is false willreuse the already read data at test suite level from context variables
*/

if(context.getProperty("workBookData")==null|| context.getProperty("workBookHeaders")==null){
log.info "First Time  reading the workbook!!"
//Initialising the required varaibles

def testData =testRunner.testCase.testSuite.project.getPropertyValue("TestDataFolder")
log.info testData
def testDataWorkBook =testRunner.testCase.testSuite.project.getPropertyValue("InputFileName")
log.info testDataWorkBook
def filePath = projectPath+"\\"+testData+"\\"+testDataWorkBook
log.info filePath
Workbook workBook = Workbook.getWorkbook(new File(filePath))
log.info workBook
def listNm=""
def headingNm =""
int columns=0
int rows=0
Sheet sheet
context.setProperty("workBookData",workBookData)
context.setProperty("workBookHeaders",workBookHeaders)

String [] sheetNames=workBook.getSheetNames()
log.info "+Test+" + sheetNames

/*Excluding the specific sheets whaich are in test data
*/ 
String excludesheetNames=testRunner.testCase.testSuite.project.getPropertyValue("ExcludeTestDataSheetNames")
log.info excludesheetNames
/*
*Looping thru tet data worksheets  to read the data
*/

for(int i=0;i<workBook.getNumberOfSheets();i++){
tempInputList=[]
if(!excludesheetNames.contains(sheetNames[i].toString())){
inputSheet=workBook.getSheet(""+testRunner.testCase.testSuite.getPropertyValue("InputSheet").toString())

/*Varied input sheets */
sheet =workBook.getSheet(i)

columns =sheet.getColumns()

rows =sheet.getRows()

context.setProperty("inputSheet",inputSheet)
context.setProperty("sheet",sheet)
context.setProperty("columns",columns)
context.setProperty("rows",rows)
inputSheetName ="inputSheetData" +i
inputSheetHeadersName="inputSheetHeadersName"+i

try{
/*
* Calling the method readDataFromSheet
*/

tempInputList =readDataFromSheet(inputSheetHeadersName)
//log.info "Sant" + tempInputList
}catch(e){
log.error e
}

/*
*Putting the list in workBookData  hash table  with the key inputSheetName
*/

workBookData.put(inputSheetName,tempInputList)
context.setProperty("workBookData",workBookData)
	}
}

/* 
* Initialising  the workBookData,workBookHeaders context variables
*/

def wBookData=context.getProperty("workBookData")
def wBookHeaders=context.getProperty("workBookHeaders")

def keys =wBookData.keySet()
def keyiterator = keys.iterator()
def sh1
for(String key:keys){
def sheet1=wBookData.get(key)
sh1=[]
Iterator<String> iter1 =sheet1.iterator()
while(iter1.hasNext()){
String str =iter1.next();
if(str.contains(testRunner.testCase.name)){
sh1.add(str)
}
}
inputData.put(key,sh1)
log.info "yaaru sh1"+ sh1.size
context.setProperty("noOfTCs",sh1.size())

}
/*
*storing to context variables
*/

context.setProperty("inputData",inputData)
context.setProperty("inputHeaders",wBookHeaders)
context.setProperty("inputIndex",0)
context.setProperty("testSCeRow",null)
}}
catch(Exception e){
log.error e
assert l==2
}
/* 
*This method returns a list by taking parameter inputsheetheadersname
*/

def readDataFromSheet(inputSheetHeadersName){

/*
*Initialising the required variables
*/

int count =0
def configIndustry=testRunner.testCase.testSuite.project.getPropertyValue("Run_Industry").toLowerCase()
def certFlag=testRunner.testCase.testSuite.project.getPropertyValue("CERTFlag").toLowerCase()
def smokeTestFlag=testRunner.testCase.testSuite.project.getPropertyValue("SmokeTestFlag").toLowerCase()
def columns =context.getProperty("columns")
def rows=context.getProperty("rows")
Sheet sheet=context.getProperty("sheet")
Sheet inputSheet= context.getProperty("inputSheet")
workBookHeaders= context.getProperty("workBookHeaders")
def listOfRows=[]
String cellData
String line=""
/* 
*getting the sheet first row headers and adding to list
*/
Cell[] rowCells =sheet.getRow(0)
log.info "Santa"+ rowCells
for(Cell cell:rowCells){
cellData =cell.getContents().toString()
//log.info "gumgumalu"+cellData
int col =cell.getColumn()
if(cellData.equalsIgnoreCase("RunRow")){
context.setProperty("runRowColumn",col)
}
else if(cellData.equalsIgnoreCase("RunCert")){
context.setProperty("runCertColumn",col)
}
else if(cellData.equalsIgnoreCase("RunSmoke")){
context.setProperty("runSmokeColumn",col)
}
else if(cellData.equalsIgnoreCase("TestScenario_ID")&&context.getProperty("testScenarioColumn")==null){
context.setProperty("testScenarioColumn",col)
}
else if(cellData.equalsIgnoreCase("Industry")){
context.setProperty("industryColumn",col)
}



if(cellData ==""){
cellData=" "
}
if (line==""){
line+=cellData
}else{ line+="~"+cellData}
}
def runRowColumn =context.getProperty("runRowColumn")
def runCertColumn =context.getProperty("runcertColumn")
def runSmokeColumn =context.getProperty("runSmokeColumn")
def testScenarioColumn =context.getProperty("testScenarioColumn")
def industryColumn=context.getProperty("industryColumn")
workBookHeaders.put(inputSheetHeadersName,line)
line="";
boolean executeRowFlag =false;
int testSceRow=0
if(context.getProperty("testSceRow")!=null){
testSceRow=context.getProperty("testSceRow")
}

/*
*Looping thru the test data input and putting the workBookHeaders table
/*
 * 
 */
for(int row= testSceRow; row<rows;row++){
runRow=inputSheet.getCell(runRowColumn,row).getContents().trim()
log.info "what is row numv"+row
if(runCertColumn!=null)
runCert=inputSheet.getCell(runCertColumn,row).getContents().trim()
else
runCert="false"
if(runSmokeColumn!=null)
runSmoke=inputSheet.getCell(runSmokeColumn,row).getContents().trim()
else
runSmoke="false"
if(industryColumn!=null)
tCIndustry=inputSheet.getCell(industryColumn,row).getContents().trim().toLowerCase()
else
tCIndustry=configIndustry
String testDataTestSceId=inputSheet.getCell(testScenarioColumn,row).getContents().trim()

if(context.getProperty("testSceRow")== null)

context.setProperty("testSceRow",row)
try{
executeRowFlag =executeRow(configIndustry.contains(tCIndustry),certFlag,smokeTestFlag,runRow,runCert,runSmoke)
}catch(e){
log.error e
}
if(executeRowFlag){
rowCells=sheet.getRow(row)
for (Cell cell:rowCells){
	cellData =cell.getContents().toString()
	if(cellData==""){
		cellData=" "
	}
	if(line==""){
		line+=cellData
	}
	else
		line+="~" +cellData
	
}
listOfRows[count]=line
line=""
count++

}
}
return listOfRows
}
/*
* This method returns  boolean value by taking string parameters tCIndustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke 
*/
def executeRow (tCIindustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke){

boolean exeRow =true
if(!smokeTestFlag.equalsIgnoreCase("true")){
	if(tCIindustry==true){
		if(certFlag.equals("true")&& (runCert.equals("")||runCert.equals("false"))){
			exeRow=false
		}
		else if(certFlag.equals("false")&& runRow.equals("false")){
			exeRow=false
		}
	}else{
		exeRow=false
	}
}
else{
	if(runSmoke.equals("true")){
		if(tCIindustry==false){
			exeRow=false
		}
		
	}else if (runSmoke.equals("false")||runSmoke.equals("")){
		exeRow=false
	}
}
return exeRow
}


 
]]></script></con:config></con:testStep><con:testStep type="groovy" name="LoadRow" id="cb767f84-b523-4bac-847b-f1e7d58c8f49"><con:settings/><con:config><script><![CDATA[/*
* This script is to read the next row from context variables and sets the same in test case properties
*/
/*
* Intializing the variables
*/
def callingTC = testRunner.getTestCase();
def inputTokens = []
def assertTokens = []
def headerTokens= []
def inputIndex = context.getProperty("inputIndex")
def inputData = context.getProperty("inputData")
def inputHeaders = context.getProperty("workBookHeaders")
def noOfTCs= context.getProperty("noOfTCs")
log.info "ethana test case" + noOfTCs

/*
* Checking workBookHeaders, inputData, noOfTCs
*/

try{
	
	if (context.getProperty("workBookHeaders") != null && context.getProperty("inputData") != null && noOfTCs !=0){
	log.info "wbheadr value"+ context.getProperty("workBookHeaders")
	log.info "wbheadr value"+ context.getProperty("inputData")
	log.info "wbheadr value"+ noOfTCs
/*
* Initializing the variables and getting the header values
*/
		def s=0;
		def headerKeys = inputHeaders.keySet()
		def headerIterator = headerKeys.iterator()
		while (headerIterator.hasNext()){
			headerTokens[s] = inputHeaders.get(headerIterator.next()).split("~")
			s++
		}
		/*
		 Intializing the variables and getting the input data values
		 */
		s=0;
		def inputKeys = inputData.keySet()
		def inputIterator = inputKeys.iterator()
		while (inputIterator.hasNext()){
		inputTokens[s] = (inputData.get(inputIterator.next()))[inputIndex].split("~")	
		s++
		}
		/*
		 * setting the headers as property name and input data as values to property
		 */
		def len = headerTokens.size()
		for(int i=0; i<len; i++){
			def innerLen = headerTokens[i].length
			for (int j=0 ; j<innerLen; j++){
				callingTC.setPropertyValue(headerTokens[i][j].trim(), inputTokens[i][j].trim())
			}
	}
		
}
/*
 * checking the number of test cases to be executed and diverting the executiob to loop
 */
else if (noOfTCs == 0){
	log.info "noOfTCs value is " + noOfTCs + " !! "
	testRunner.gotoStepByName("Loop")
}else{
	log.info "Issue while Reading the Test Data!!"
	testRunner.gotoStepByName("Loop")
}
}
catch(Exception e){
	log.error e
	testRunner.gotoStepByName("Loop")
	assert 1==2
}


]]></script></con:config></con:testStep><con:testStep type="request" id="1972bfea-cf5b-4dfe-8a04-dc73ba5f879a" name="Add"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>add</con:operation><con:request name="Add" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="93d88b24-c14c-45a4-93ad-17d2b13f2951"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:add>\r
         <cal:x>${#TestCase#ValueA}</cal:x>\r
         <cal:y>${#TestCase#ValueB}</cal:y>\r
      </cal:add>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="17b79c7a-caa3-4880-a5d9-6012ac6732d3" name="SOAP Response"/><con:assertion type="Simple Contains" id="10da2210-9985-4c17-972e-03333a49ac8a" name="Contains"><con:configuration><token>9.0</token><ignoreCase>false</ignoreCase><useRegEx>false</useRegEx></con:configuration></con:assertion><con:assertion type="XPath Match" id="1ef762fd-9aa2-4879-8f26-68f2f76af136" name="XPath Match"><con:configuration><path>//*:Result</path><content>${#TestCase#Result}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="XPath Match" id="524fa83d-c402-428e-8930-17ea729c6ad5" name="XPath Match 1"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace n='http://www.parasoft.com/wsdl/calculator/';
//n:Result</path><content>${#TestCase#Result}</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="add"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Detailed Report" id="bd5c0da4-7d15-4913-8a77-737a4998cb97"><con:settings/><con:config><script><![CDATA[
//log.info "Test"
import java.math.*;
import jxl.*
import java.util.*;
import groovy.util.*

	//log,info"check"
def testCasename = testRunner.testCase.name

groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStepStatus =[];
Date date = new Date()
def dateTime
dateTime = date.format('ddMMyy_hhmmss_S').toString()

double currtime = testRunner.timeTaken;
double time =0.00;
prevTime =0.00;

//calculating test case execution time
if(context.testCaseTimeTaken != null && context.testcaseStatus.size() > 0 && context.inputIndex !=0)
{
	time = currtime - context.prevTime;
}else{
	time = currtime;
}

//Convertint the time into two digit number
double seconds = (time/1000);
try{
	seconds = seconds.round(2);
}catch(e){
	log.info "error: " +e
}

/// Creating a Reports folder if it's not exists
def results = testRunner.results
def resultDir = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ReportsFolderName"));
if(!resultDir.exists())
{
		resultDir.mkdir();
}

//Incrementing the InputIndex value
inputIndex = context.inputIndex;
inputIndex = inputIndex+1;


def detailedReportFileName = context.detailedReportFileName;
Writer writer=null;

//checking detailed report file is already created or not
if(detailedReportFileName == null){
	try
	{
		context.testSteps=0
		context.runners = []
		context.testcasenames = []
		context.testcasedescription = []
		context.filenames = []
		context.testcaseStatus = []
		context.testcaseTimeTaken = []
		context.rowIndex = []
		context.prevTime = 0.00
		context.rowStepCount = 1;

		//Intializing Detailed report
		context.detailedReportFileName = testRunner.testCase.testSuite.name.replace(" ","_")+"_Detailed_Report_"+dateTime +".html";
		log.info "initialising the html report"
		File file = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ProjectReportFolderName")+
		"/"+testRunner.testCase.testSuite.project.name+"/"+context.detailedReportFileName);
		try{
		writer = new FileWriter(file, true);
		}
		catch(Throwable e){
			log.info "writer is not working"+e;
		}

		writer.write("<html>")
		writer.write("<Table border=0 cellSpacing=1 cellPadding=1 width='100%>")
		writer.write("<tr>")
		writer.write("<TD align='left'>")
		//Writer.write("<TD align=right'><img src= '"+groovyUtils.projectPath+"/Logos/Client.jpg' alt='HPS' height='50' width='150'/></TD>")
		writer.write("<TD align='center'><H4 align='center'><font color='660066' face='arial' color='#E0E0E0' size=5><b>Execution Detailed Report</b></font></H4></TD>")
		//Writer.write("<TD align='right'><img src= '"+groovyUtils.projectPath+"/Logos/Cigniti.jpg' alt='Cigniti' height='50' width='150'/>>/TD")
		writer.write("</tr></table>")
		if(null!=context.filenames)
		{
			context.filenames.add("../"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName+"#"+testRunner.testCase.getPropertyValue("Row_Index").toString())
		}
	}catch (Throwable e)
		{
			log.info "error: "+e;
		}
	}
	else
	{
		try
		{
			File file1 = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ProjectReportFolderName")+"/"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName);
			writer = new FileWriter(file1,true);
			if(null!=context.filenames)
			{
				context.filenames.add("../"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName+"#"+testRunner.testCase.getPropertyValue("RowIndex").toString())
			}
		}
		catch (Throwable e)
		{
			log.info "error: "+e;
		}
	}

	try
	{
		writer.write("<TABLE align=center width=80%><tr><td>")
		writer.write("<TABLE id="+testRunner.testCase.getPropertyValue("Row_Index").toString()+" align=center border=1 cellSpacing=1 cellPadding=1 width=100% font=Arial style=margin-top:60px>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 style=Arial><a name=1></a><B>Test Scenario Name</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("TestScenario_ID").toString())
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>TestCase Description</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("TestScenario_DetailedDescription").toString()+"</b></font></th>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><B>Row Index</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("Row_Index").toString()+"</b></font></th>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><B>Execution Time(Sec)</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+seconds+"</b></font></th>")
		writer.write("</table></tr></td><tr><td>")

		writer.write("<TABLE align=center border=1 cellSpacing=1 cellPadding=1 width=100% font=Arial>")
		writer.write("<tr>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Step No</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Step</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Request</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Response</b></font></th>")
		writer.write("<TH bgcolor=#153e7e width=10% align=middle><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Status</b></font></th>")
	}
	
	catch (Throwable e)
		{
			log.info "error: "+e;
		}

boolean flag = false;
intLoopCount1=0;
rowStepCount1 = context.testSteps;

//Looping through results (test Steps)
for( r in testRunner.results )
{
	log.info "inside the test runner r for loop"
	if ( intLoopCount1 >= rowStepCount1)
	{
		if(r.status.toString() != 'OK' && flag == false)
		{
			flag=true;
writer.write("<TH bgcolor=#153e7e align =middle><FONT color =#e0e0e0 size =2 face= Arial><B>Reason</b></font></th>")
}
}
intLoopCount1=intLoopCount1+1;
}
try{
	log.info "inside the try line 159"
writer.write("</tr>")
boolean firstLoop =true;
stepCount=1;
intLoopCount=0;
//def testStepStatus =[];
rowStepCount = context.testSteps;
for(r in testRunner.results)
{
	log.info "inside the second tesrunner results for"
	log.info "value of r" +r;
	log.info "value of intcount"+intLoopCount
	log.info "value of rowStepCount"+rowStepCount
	
if(intLoopCount >= rowStepCount)
{
log.info "inside intloopcount>=rowstepcount"
if( r.getTestStep().config.type=="request" || r.getTestStep().config.type == "restrequest" || r.status.toString()== "FAILED" )
//if(r.testStep.name.toString()!="ReadData"||r.testStep.name.toString()!="LoadRow"||r.testStep.name.toString()!="Loop"||r.testStep.name.toString()!="ReadData"||r.testStep.name.toString()!="LoadRow"||r.testStep.name.toString()!="Delay")
{
log.info "inside going to long if"
writer.write("<tr>")
writer.write("<td align =middle><font color=#153e7e size=2 style=Arial>")
writer.write("step"+stepCount)
writer.write("</font></td>")
writer.write("<td align=left><font color=#153e7e size=2 style=Arial>")
writer.write(r.testStep.name)
writer.write("</font></td>")

def testStep =r.getTestStep();
if(testStep.config.type=="request"|| testStep.config.type=="restrequest")
{
try{
log.info "inside the raw request condition "
def rawRequest=new String(r.rawRequestData);
def rawResponse =new String(r.rawResponseData);

writer.write("<td align=left><font color=#153e7e size=2 style=Arial>")
writer.write("<textarea rows ='20' cols ='40'  style= 'border:none;'>"+ rawRequest+"</textarea>")
writer.write("</font></td>")
writer.write("<td>")
writer.write("<textarea rows ='20' cols ='40'  style= 'border:none;'>"+ rawResponse+"</textarea>")
writer.write("</td>")
}
catch(e){
log.info "error:"+e;
writer.write("<td align=left><font color =#153e7e size=2 style =Arial>")
writer.write("</td>")
writer.write("<td><font color =153e7e size=Arial><font>")
writer.write("</td>")
}
}
else{
	log.info "else part of teststepconfig"
writer.write("<td><font color=#153e7e size=2 style=Arial></font>")
writer.write("<td>")
writer.write("<td><font color=#153e7e size=2 style=Arial></font>")
writer.write("<td>")
}
if(r.status.toString()=="OK" || r.status.toString()=="UNKNOWN")
{
log.info "inside r status=ok"
testStepStatus.add("PASSED")
writer.write("<td width='10%' bgcolor=green align =center><font color=white size =2 style=Arail>")
writer.write("PASSED")
if(flag == true){
	writer.write("</td><font color=#153e7e size=2 style=Arial>")
     writer.write("</font></td>")
}
}
else
{
	log.info"else failed block line 231"
testStepStatus.add("FAILED")
writer.write("<td width ='10%' bgcolor=red align= center><font color=white size=2 style=Arial>")
writer.write(r.status.toString())
writer.write("</td><td align=left><font color=Red size=2 style Arial>")
if(testStep.config.type=="groovy" && context.dBvalidationReason != "" && r.getTestStep().name.toString().contains("Table"))
{
writer.write(context.dBValidationReason)
}
try{
if(testStep.config.type=="request" || testStep.config.type=="restrequest")
{
def error=null;
def errorMessage ="";
Assertioncounter=testStep.getAssertionList().size();
for(AssertionCount in 0..Assertioncounter-1){
if( testStep.getAssertionAt(AssertionCount).getStatus().toString()=="FAILED"){
error=testStep.getAssertionAt(AssertionCount).getErrors()
for (err in error)
{
errorMessage += "<br>"+err.toString()+"; </br>"
}
}
}
writer.write(errorMessage)
}
}
catch(e){
log.info"error:"+e;
writer.write("ERROR: Exception in Request: java.net.soceketTimeoutException:Read timed out");
}
}
writer.write("</font></td>")
writer.write("</tr>")
stepCount =stepCount + 1
}
}
intLoopCount = intLoopCount+1;
}
context.testSteps = testRunner.results.size();
}
catch(Throwable e){
log.info"error:"+e;
}

finally{
writer.write("</table>")
writer.write("</tr></td></table>")
writer.write("<a href ='#top' align='right'><FONT color=#153e7e size=2 face=arial><b>Back to Top</></font></a>")
writer.write("<br/>")
writer.flush();
writer.close();
log.info "inside if after finally block"
if(null!=context.testcaseStatus)
{
log.info "inside if after"	
if(testStepStatus.contains("FAILED"))
{
context.testcaseStatus.add("FAILED")
}
else
{
context.testcaseStatus.add("PASSED")
}
context.testcasedescription.add(testRunner.testCase.getPropertyValue("TestScenario_DetailedDescription"))
}
if(null!=context.testcaseTimeTaken)
{
context.testcaseTimeTaken.add(seconds);
context.prevTime=testRunner.timeTaken;
}
if(null!=context.rowindex)
{
context.rowIndex.add(testRunner.testCase.getPrtopertyValue("Row_Index"));
}
if(null!=context.testcasenames)
{
context.testcasenames.add(testCasename);
}
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="b0086386-dfba-45ed-999a-532f9e4262ca"><con:settings/><con:config><script>/*
 * This Script is to check the row/ test case count executed with the total and loops the execution if any more rows need to be executed
 */
 /*
  * Intializing the variables
  * Here InputIndex value is executed test count and noOfTCs is total test count
  */
  def inputIndex = context.getProperty("inputIndex")
  def noOfTCs = context.getProperty("noOfTCS")

  try{
  	if(context.getProperty("inputIndex") != null){
  		inputIndex += 1 
  		/*
  		 * Check the InputIndex which is executed test count with total count and navigates to the LoadRow if the 
  		 * InputIndex is less than the total count
  		 */
  		 if(inputIndex &lt; noOfTCs){
  		 	context.setProperty("inputIndex", inputIndex)
  		 	testRunner.gotoStepByName("LoadRow")
  		 }
  	}else{
  		log.info "inputIndex context variable is "+inputIndex+" !!"
  	}
  }catch(e){
  log.error e
  }</script></con:config></con:testStep><con:testStep type="groovy" name="Tryreport" id="e9786946-92b1-41f4-883d-5216ac6929cb" disabled="true"><con:settings/><con:config><script><![CDATA[import java.math.*;
import jxl.*
import java.util.*;
import groovy.util.*

def testCasename = testRunner.testCase.name

groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
Date date = new Date()
def dateTime
dateTime = date.format('ddMMyy_hhmmss_S').toString()

double currtime = testRunner.timeTaken;
double time =0.00;
prevTime =0.00;
//log.info currtime

if(context.testCaseTimeTaken != null && context.testcaseStatus.size() > 0 && context.inputIndex !=0)
{
	time = currtime - context.prevTime;
	log.info "inside if condtion"
}else{
	time = currtime;
 log.info "inside else condition"
	
}

//Convertint the time into two digit number
double seconds = (time/1000);
try{
	seconds = seconds.round(2);
	log.info "inside the catch seconds block"
}catch(e){
	log.info "error: " +e
}

/// Creating a Reports folder if it's not exists
def results = testRunner.results
def resultDir = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ReportsFolderName"));
if(!resultDir.exists())
{
		resultDir.mkdir();
		log.info "inside the makedirectory condition"
}


//Incrementing the InputIndex value
inputIndex = context.inputIndex;
inputIndex = inputIndex+1;


def detailedReportFileName = context.detailedReportFileNme;
Writer writer = null;

//checking detailed report file is already created or not
if(detailedReportFileName == null){
	try
	{
		log.info "checkng detailed report aand detailed report value is null"
		context.testSteps=0
		context.runners = []
		context.testcasenames = []
		context.testcasedescription = []
		context.filenames = []
		context.testcaseStatus = []
		context.testcaseTimeTaken = []
		context.rowIndex = []
		context.prevTime = 0.00
		context.rowStepCount = 1;

		//Intializing Detailed report
		context.detailedReportFileName = testRunner.testCase.testSuite.name.replace(" ","_")+"_Detailed_Report_"+dateTime +".html";
		File file = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ProjectReportFolderName")+
		"/"+testRunner.testCase.testSuite.project.name+"/"+context.detailedReportFileName);
		writer = new FileWriter(file, true);

		Writer.write("<html>")
		Writer.write("<Table border=0 cellSpacing=1 cellPadding=1 width='100%>")
		Writer.write("<tr>")
		Writer.write("<TD align='left'>")
		//Writer.write("<TD align=right'><img src= '"+groovyUtils.projectPath+"/Logos/Client.jpg' alt='HPS' height='50' width='150'/></TD>")
		Writer.write("<TD align='center'><H4 align='center'><font color='660066' face='arial' color='#E0E0E0' size=5><b>Execution Detailed Report</b></font></H4></TD>")
		//Writer.write("<TD align='right'><img src= '"+groovyUtils.projectPath+"/Logos/Cigniti.jpg' alt='Cigniti' height='50' width='150'/>>/TD")
		Writer.write("</tr></table>")
		if(null!=context.filenames)
		{
			context.filenames.add("../"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName+"#"+testRunner.testCase.getPropertyValue("Row_Index").toString())
		}
	}catch (Throwable e)
		{
			log.info "error: "+e;
		}
	}
	else
	{
		try
		{
			log.info "else part of detailed report"
			File file1 = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ProjectReportFolderName")+"/"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName);
			writer = new FileWriter(file1,true);
			if(null!=context.filenames)
			{
				context.filenames.add("../"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName+"#"+testRunner.testCase.getPropertyValue("RowIndex").toString())
			}
		}
		catch (Throwable e)
		{
			log.info "error: "+e;
		}
	}
	try
	{   log.info "inside test runner"
		Writer.write("<TABLE align=center width=80%><tr><td>")
		Writer.write("<TABLE id="+testRunner.testCase.getPropertyValue("Row_Index").toString()+" align=center border=1 cellSpacing=1 cellPadding=1 width=100% font=Arial style=margin-top:60px>")
		Writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 style=Arial><a name=1></a><B>Test Scenario Name</b></font></th>")
		Writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("TestScenario_ID").toString())
		Writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>TestCase Description</b></font></th>")
		Writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("TestScenario_DetailedDescription").toString()+"</b></font></th>")
		Writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><B>Row Index</b></font></th>")
		Writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("Row_Index").toString()+"</b></font></th>")
		Writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><B>Execution Time(Sec)</b></font></th>")
		Writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+seconds+"</b></font></th>")
		Writer.write("</table></tr></td><tr><td>")

		Writer.write("<TABLE align=center border=1 cellSpacing=1 cellPadding=1 width=100% font=Arial>")
		Writer.write("<tr>")
		Writer.write("<tr><TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Step No</b></font></th>")
		Writer.write("<tr><TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Step</b></font></th>")
		Writer.write("<tr><TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Request</b></font></th>")
		Writer.write("<tr><TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Response</b></font></th>")
		Writer.write("<tr><TH bgcolor=#153e7e width=10% align=middle><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Status</b></font></th>")
	}
	
	catch (Throwable e)
		{
			log.info "error: "+e;
		}

		boolean flag = false;
intLoopCount1=0;
rowStepCount1 = context.testSteps;

//Looping through results (test Steps)
for( r in testRunner.results)
{
	log.info "inside the testRunner for loop"
	if ( intLoopCount1 >= rowStepCount1)
	{
		if(r.status.toString() != 'OK' && flag == false)
		{
			flag=true;
writer.write("<TH bgcolor=#153e7e align =middle><FONT color =#e0e0e0 size =2 face= Arial><B>Reason</b></font></th>")
}
}
intLoopCount1=intLoopCount1+1;
}

try{
writer.write("</tr>")
boolean firstLoop =true;
stepCount=1;
intLoopCount=0;
def testStepStatus =[];
rowStepoCount=context.testSteps;
for(r in testRunner.results)
{
if(intLoopCount>=rowStepCount)
{

if(r.gettestStep().config.type=="request"||r.gettestStep.config.type=="restrequest"||r.status.toString()=="FAILED")
//if(r.testStep.name.toString()!="ReadData"||r.testStep.name.toString()!="LoadRow"||r.testStep.name.toString()!="Loop"||r.testStep.name.toString()!="ReadData"||r.testStep.name.toString()!="LoadRow"||r.testStep.name.toString()!="Delay")
{
writer.write("<tr>")
writer.write("<td align =middle><font color=#153e7e size=2 style=Arial>")
writer.write("step"+stepCount)
writer.write("</font></td>")
writer.write("<td align=left><font color=#153e7e size=2 style=Arial>")
writer.write(r.testStep.name)
writer.write("</font></td>")

def testStep =r.getTestStep();
if(testStep.config.type=="request"|| testStep.config.type=="restrequest")
{
try{
def rawRequest=new String(r.rawRequestData);
def rawResponse =new String(r.rawResponseData);

writer.write("<td align=left><font color=#153e7e size=2 style=Arial>")
writer.write("<textarea rows ='20' cols ='40'  style= 'border:none;'>"+ rawRequest+"</textarea>")
writer.write("</font></td>")
writer.write("<td>")
writer.write("<textarea rows ='20' cols ='40'  style= 'border:none;'>"+ rawResponse+"</textarea>")
writer.write("</td>")
}
catch(e){
log.info "error:"+e;
writer.write("<td align=left><font color =#153e7e size=2 style =Arial>")
writer.write("</td>")
writer.write("<td><font color =153e7e size=Arial><font>")
writer.write("</td>")
}
}
else{
writer.write("<td><font color=#153e7e size=2 style=Arial></font>")
writer.write("<td>")
writer.write("<td><font color=#153e7e size=2 style=Arial></font>")
writer.write("<td>")
}
if(r.status.toString()=="OK"||r.status.toString()=="UNKNOWN")
{

testStepStatus.add("PASSED")
writer.write("<td width='10%' bgcolor=green align =center><font color=white size =2 style=Arail>")
writer.write("PASSED")
if(flag==true){
	writer.write("</td><font color=#153e7e size=2 style=Arial>")
     writer.write("</font></td>")
}
}
else
{
testStepStatus.add("FAILED")
writer.write("<td width ='10%' bgcolor=red align= center><font color=white size=2 style=Arial>")
writer.write(r.status.toString())
writer.write("</td><td align=left><font color=Red size=2 style Arial>")
if(testStep.config.type=="groovy"&& context.dBvalidationReason!="" && r.getTestStep().name.toString().contains("Table"))
{
writer.write(context.dBValidationReason)
}
try{
if(testStep.config.type=="request" || testStep.config.type=="restrequest")

{
def error=null
def errorMessage =""
Assertioncounter=testStep.getAssertionList.size();
for(AssertionCount in 0..Assertioncounter-1){
if(testStep.getAssertionAt(AssertionCount).getStatus.toString()=="FAILED"){
error=testStep.getAssertionAt(AssertionCount).getErrors()
for (err in error)
{
errorMessage+="<br>"+err.toString()+";</br>"
}
}
}
writer.write(errorMessage)
}
}
catch(e){
log.info"error:"+e;
writer.write("ERROR: Exception in Request: java.net.soceketTimeoutException:Read timed out");
}
}
writer.write("</font></td>")
writer.write("</tr>")
stepcount =stepcount+1
}
}
intLoopCount=intLoopCount+1;
}
context.testSteps=testRunner.results.size();
}
catch(Throwable e){

log.info="error:"+e;
}

finally{
/*writer.write("</table>")
writer.write("</tr></td></table>")
writer.write("<a href ='#top' align='right'><FONT color=#153e7e size=2 face=arial><b>Back to Top</></font></a>")
writer.write("<br/>")
writer.flush();
writer.close();

if(null!=context.testcaseStatus)
{
if(testStepStatus.contains("FAILED"))
{
context.testcaseStatus.add("FAILED")
}
else
{
context.testcaseStatus.add("PASSED")
}
context.addtestcasedescription.add(testRunner.testCase.getPropertyValue("TestScenario_DetailedDescription"))
}
if(null!=context.testcaseTimeTaken)
{
context.testcasesTimeTaken.add(seconds);
context.prevTime=testRunner.timeTaken;

}
if(null!==context.rowindex)
{
context.rowIndex.add(testRunner.testCase.getPrtopertyValue("Row_Index"));
}
if(null!=context.testcasenames)
{

context.testcasenames.add(testcasename);
}
*/}]]></script></con:config></con:testStep><con:testStep type="groovy" name="errrr" id="cd743204-2853-43b2-a0bd-21dea38ef4f8" disabled="true"><con:settings/><con:config><script><![CDATA[/*
 * This script is to initialise the test suite detailed report
 * and does the archiving of existing reports the existing reports woulid be moved to Reports Archive folder
 * 
 * Also this script reads the test dsata and stores into context variabkes wotrkbookdata,workbookheaders
 */
import jxl.*
/*
 * Initialising the variable
 */
 groovyUtils=new com.eviware.soapui.support.GroovyUtils(context)
 projectPath=groovyUtils.projectPath
 context.testSteps=0
 context.runners=[]
 context.testcasenames=[]
 context.testcasedescription=[]
 context.filenames=[]
 context.testcaseStatus=[]
 context.testcasesTimetaken=[]
 context.rowIndex=[]
 context.prevTime=0.00
 Date date =new Date()
 dateTime =date.format('ddMMyy_hhmmss_S').toString()

 /*
  * creating folder  with the name of project name inside reports if its not exists
  */
 folderCreate=new File(projectPath+testSuite.project.getPropertyValue("ProjectReportFolderName")+"/"+testSuite.project.name);
 if(!folderCreate.exists()){
 	folderCreate.mkdirs();
 }
 /*
  * Moving Existing reports into reports_Archieve folder
  * 
  */
 try{
 	def projectReportFilePath=testSuite.project.getPropertyValue("ProjectReportFolderName")+"\\"+testSuite.project.name.toString()
    def archiveReportFilePath=testSuite.project.getPropertyValue("ArchivedReportsFolderName")+"\\"+tesrSuite.project.name.toString()
    File projectReportFile =new File(projectPath+"\\"+projectReportFilePath);
    File [] listOfFiles;
    listOfFiles=projectReportFile.listFiles();
    if(listOfFiles!=null)

    for(int i=0;i<listOfFiles.length;i++){
    	def filename=listOfFiles[i].getName();
    	if(filename.startsWith(testSuite.name.toString().replace("","_"))){
    		projectReportFile=new File(projectPath+"\\"+projectReportFilePath+"\\"+filename)
    		if(!new File(projectPath+"\\"+archiverReportFilePath).exists()){
    			new File(projectPath+"\\"+archiverReportFilePath).mkdirs();
    		}
    		projectReportFile.renameTo(new File(projectPath+"\\"+archiverReportFilePath+"\\"+projectReportFile.getName()))
    	}
    }
    log.info "Test Suite Reports archived success"
 }
 catch(Throwable e){
 log.error e;
 log.info "Test Suite Reports not Archived"	   
 }
 /* 
  *  initialising the test Suite detailed reports
  */
try{
	def detailedReportFileName=testSuite.name.replace(" ","_")+"_Detailed_Report_"+dateTime+".html"
	context.detailedReportFileName =detailedReportFileName
	def detailedReportFilePath=groovyUtils.projectPath+testSuite.project.getPropertyValue("projectReportFolderName")+"/"+testSuite.project.name+"/"+detailedReportFileName
	File file =new File(detailedReportFilePath);
	Writer writer=null;
	writer =new FileWriter(file,true);
	/*
	 * Adding headers to the deatiled report
	 */
		 writer.write("<html>")
		writer.write("<Table border=0 cellSpacing=1 cellPadding=1 width='100%>")
		writer.write("<tr>")
		writer.write("<TD align='left'>")
		//Writer.write("<TD align=right'><img src= '"+groovyUtils.projectPath+"/Logos/Client.jpg' alt='HPS' height='50' width='150'/></TD>")
		writer.write("<TD align='center'><H4 align='center'><font color='660066' face='arial' color='#E0E0E0' size=5><b>Execution Detailed Report</b></font></H4></TD>")
		//Writer.write("<TD align='right'><img src= '"+groovyUtils.projectPath+"/Logos/Cigniti.jpg' alt='Cigniti' height='50' width='150'/>>/TD")
		writer.write("</tr></table>")
		writer.write("<br/>")
		writer.flush();
		writer.close();
}catch(Throwable e){
log.error e;}
/*
 * starting of reading the test data workbook
 */
 try{  
 def workBookData= new Hashtable()
 def workBookHeaders = new Hashtable()
 def listNm=""
def headingNm =""
int columns=0
int rows=0
def testData =testRunner.testCase.testSuite.project.getPropertyValue("TestDataFolder")
def testDataWorkBook =testRunner.testCase.testSuite.project.getPropertyValue("InputFileName")
def filePath = projectPath+"\\"+testData+"\\"+testDataWorkBook

Workbook workBook = Workbook.getWorkbook(new File(filePath))
Sheet sheet
context.setProperty("workBookData",workBookData)
context.setProperty("workBookHeaders",workBookHeaders)

String [] sheetNames=workBook.getSheetNames()


/*Excluding the specific sheets whaich are in test data
*/ 
String excludesheetNames=testRunner.testCase.testSuite.project.getPropertyValue("ExcludeTestDataSheetNames")
log.info excludesheetNames
/*
*Looping thru tet data worksheets  to read the data
*/

for(int i=0;i<workBook.getNumberOfSheets();i++){
tempInputList=[]
if(!excludesheetNames.contains(sheetNames[i].toString())){
inputSheet=workBook.getSheet(""+testRunner.testCase.testSuite.getPropertyValue("InputSheet").toString())

/*Varied input sheets */
sheet =workBook.getSheet(i)

columns =sheet.getColumns()

rows =sheet.getRows()

context.setProperty("inputSheet",inputSheet)
context.setProperty("sheet",sheet)
context.setProperty("columns",columns)
context.setProperty("rows",rows)
inputSheetName ="inputSheetData" +i
inputSheetHeadersName="inputSheetHeadersName"+i

try{
/*
* Calling the method readDataFromSheet
*/

tempInputList =readDataFromSheet(inputSheetHeadersName)
//log.info "Sant" + tempInputList
}catch(e){
log.error e;
}
/*
*Putting the list in workBookData  hash table  with the key inputSheetName
*/

workBookData.put(inputSheetName,tempInputList)
context.setProperty("workBookData",workBookData)
}
}
}catch( Throwable e ){
	log.error e;
}
//log.info "NOt Read the Test Data"


/* 
*This method returns a list by taking parameter inputsheetheadersname
*/

def readDataFromSheet(inputSheetHeadersName){

/*
*Initialising the required variables
*/

int count =0
def configIndustry=testRunner.testCase.testSuite.project.getPropertyValue("Run_Industry").toLowerCase()
def certFlag=testRunner.testCase.testSuite.project.getPropertyValue("CERTFlag").toLowerCase()
def smokeTestFlag=testRunner.testCase.testSuite.project.getPropertyValue("SmokeTestFlag").toLowerCase()
def columns =context.getProperty("columns")
def rows=context.getProperty("rows")
Sheet sheet=context.getProperty("sheet")
Sheet inputSheet= context.getProperty("inputSheet")
workBookHeaders= context.getProperty("workBookHeaders")
def listOfRows=[]
String cellData
String line=""
/* 
*getting the sheet first row headers and adding to list
*/
Cell[] rowCells =sheet.getRow(0)
log.info "Santa"+ rowCells
for(Cell cell:rowCells){
cellData =cell.getContents().toString()
//log.info "gumgumalu"+cellData
int col =cell.getColumn()
if(cellData.equalsIgnoreCase("RunRow")){
context.setProperty("runRowColumn",col)
}
else if(cellData.equalsIgnoreCase("RunCert")){
context.setProperty("runCertColumn",col)
}
else if(cellData.equalsIgnoreCase("RunSmoke")){
context.setProperty("runSmokeColumn",col)
}
else if(cellData.equalsIgnoreCase("TestScenario_ID")&&context.getProperty("testScenarioColumn")==null){
context.setProperty("testScenarioColumn",col)
}
else if(cellData.equalsIgnoreCase("Industry")){
context.setProperty("industryColumn",col)
}



if(cellData ==""){
cellData=" "
}
if (line==""){
line+=cellData
}else{ line+="~"+cellData}
}
def runRowColumn =context.getProperty("runRowColumn")
def runCertColumn =context.getProperty("runcertColumn")
def runSmokeColumn =context.getProperty("runSmokeColumn")
def testScenarioColumn =context.getProperty("testScenarioColumn")
def industryColumn=context.getProperty("industryColumn")
workBookHeaders.put(inputSheetHeadersName,line)
line="";
boolean executeRowFlag =false;
int testSceRow=0
if(context.getProperty("testSceRow")!=null){
testSceRow=context.getProperty("testSceRow")
}

/*
*Looping thru the test data input and putting the workBookHeaders table
/*
 * 
 */
for(int row= testSceRow; row<rows;row++){
runRow=inputSheet.getCell(runRowColumn,row).getContents().trim()
log.info "what is row numv"+row
if(runCertColumn!=null)
runCert=inputSheet.getCell(runCertColumn,row).getContents().trim()
else
runCert="false"
if(runSmokeColumn!=null)
runSmoke=inputSheet.getCell(runSmokeColumn,row).getContents().trim()
else
runSmoke="false"
if(industryColumn!=null)
tCIndustry=inputSheet.getCell(industryColumn,row).getContents().trim().toLowerCase()
else
tCIndustry=configIndustry
String testDataTestSceId=inputSheet.getCell(testScenarioColumn,row).getContents().trim()

if(context.getProperty("testSceRow")== null)

context.setProperty("testSceRow",row)
try{
executeRowFlag =executeRow(configIndustry.contains(tCIndustry),certFlag,smokeTestFlag,runRow,runCert,runSmoke)
}catch(e){
log.error e
}
if(executeRowFlag){
rowCells=sheet.getRow(row)
for (Cell cell:rowCells){
	cellData =cell.getContents().toString()
	if(cellData==""){
		cellData=" "
	}
	if(line==""){
		line+=cellData
	}
	else
		line+="~" +cellData
	
}
listOfRows[count]=line
line=""
count++

}
}
return listOfRows
}
/*
* This method returns  boolean value by taking string parameters tCIndustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke 
*/
def executeRow (tCIindustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke){

boolean exeRow =true
if(!smokeTestFlag.equalsIgnoreCase("true")){
	if(tCIindustry==true){
		if(certFlag.equals("true")&& (runCert.equals("")||runCert.equals("false"))){
			exeRow=false
		}
		else if(certFlag.equals("false")&& runRow.equals("false")){
			exeRow=false
		}
	}else{
		exeRow=false
	}
}
else{
	if(runSmoke.equals("true")){
		if(tCIindustry==false){
			exeRow=false
		}
		
	}else if (runSmoke.equals("false")||runSmoke.equals("")){
		exeRow=false
	}
}
return exeRow
}

]]></script></con:config></con:testStep><con:properties><con:property><con:name>Row_Index</con:name><con:value>1</con:value></con:property><con:property><con:name>TestScenario_ID</con:name><con:value>TC01_Add-positive scenario</con:value></con:property><con:property><con:name>TestScenario_DetailedDescription</con:name><con:value>Adding 2 numbers</con:value></con:property><con:property><con:name>Result</con:name><con:value>8.0</con:value></con:property><con:property><con:name>V2</con:name><con:value>2</con:value></con:property><con:property><con:name>V3</con:name><con:value>5</con:value></con:property><con:property><con:name>RunRow</con:name><con:value>true</con:value></con:property><con:property><con:name>WorkItem</con:name><con:value>Dummy</con:value></con:property><con:property><con:name>TC_Num</con:name><con:value>1</con:value></con:property><con:property><con:name>TestCaseId</con:name><con:value/></con:property><con:property><con:name>Industry</con:name><con:value>Retail</con:value></con:property><con:property><con:name>ValueA</con:name><con:value>7</con:value></con:property><con:property><con:name>ValueB</con:name><con:value>2</con:value></con:property><con:property><con:name>ValueC</con:name><con:value>5</con:value></con:property></con:properties></con:testCase><con:testCase id="ec8cf570-ed47-4ce8-ab48-d41c829de98b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TC02_MultipleScenario" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="ReadData" id="14b153b8-8d7a-48b1-9e02-67d2cb4f6af4"><con:settings/><con:config><script><![CDATA[/*
* This script is to read the test data if the context variables are null and stores into context varaibles workBookData,workBookHeaders
*/

import jxl.*

/*
*Initialising the variables
*/

def groovyUtils =new com.eviware.soapui.support.GroovyUtils(context)
//def projectPath  = "F:\\Thilak\\web services"
log.info groovyUtils.projectPath
def projectPath =groovyUtils.projectPath
log.info groovyUtils.projectPath
def workBookData = new Hashtable()
def workBookHeaders = new Hashtable()
def inputData= new Hashtable()
def inputHeaders= new Hashtable()

try{
/*
* Checcking context variables null or not
* If this condition  is true will read the test data and stores the data in context variables workBookData,workBookHeaders
*If this condition is false willreuse the already read data at test suite level from context variables
*/

if(context.getProperty("workBookData")==null|| context.getProperty("workBookHeaders")==null){
log.info "First Time  reading the workbook!!"
//Initialising the required varaibles

def testData =testRunner.testCase.testSuite.project.getPropertyValue("TestDataFolder")
log.info testData
def testDataWorkBook =testRunner.testCase.testSuite.project.getPropertyValue("InputFileName")
log.info testDataWorkBook
def filePath = projectPath+"\\"+testData+"\\"+testDataWorkBook
log.info filePath
Workbook workBook = Workbook.getWorkbook(new File(filePath))
log.info workBook
def listNm=""
def headingNm =""
int columns=0
int rows=0
Sheet sheet
context.setProperty("workBookData",workBookData)
context.setProperty("workBookHeaders",workBookHeaders)

String [] sheetNames=workBook.getSheetNames()
log.info "+Test+" + sheetNames

/*Excluding the specific sheets whaich are in test data
*/ 
String excludesheetNames=testRunner.testCase.testSuite.project.getPropertyValue("ExcludeTestDataSheetNames")
log.info excludesheetNames
/*
*Looping thru tet data worksheets  to read the data
*/

for(int i=0;i<workBook.getNumberOfSheets();i++){
tempInputList=[]
if(!excludesheetNames.contains(sheetNames[i].toString())){
inputSheet=workBook.getSheet(""+testRunner.testCase.testSuite.getPropertyValue("InputSheet").toString())

/*Varied input sheets */
sheet =workBook.getSheet(i)

columns =sheet.getColumns()

rows =sheet.getRows()

context.setProperty("inputSheet",inputSheet)
context.setProperty("sheet",sheet)
context.setProperty("columns",columns)
context.setProperty("rows",rows)
inputSheetName ="inputSheetData" +i
inputSheetHeadersName="inputSheetHeadersName"+i

try{
/*
* Calling the method readDataFromSheet
*/

tempInputList =readDataFromSheet(inputSheetHeadersName)
log.info "Sant" + tempInputList
}catch(e){
log.error e
}

/*
*Putting the list in workBookData  hash table  with the key inputSheetName
*/

workBookData.put(inputSheetName,tempInputList)
context.setProperty("workBookData",workBookData)
	}
}

/* 
* Initialising  the workBookData,workBookHeaders context variables
*/

def wBookData=context.getProperty("workBookData")
def wBookHeaders=context.getProperty("workBookHeaders")

def keys =wBookData.keySet()
def keyiterator = keys.iterator()
def sh1
for(String key:keys){
def sheet1=wBookData.get(key)
sh1=[]
Iterator<String> iter1 =sheet1.iterator()
while(iter1.hasNext()){
String str =iter1.next();
if(str.contains(testRunner.testCase.name)){
sh1.add(str)
}
}
inputData.put(key,sh1)
log.info "yaaru sh1"+ sh1.size
context.setProperty("noOfTCs",sh1.size())

}
/*
*storing to context variables
*/

context.setProperty("inputData",inputData)
context.setProperty("inputHeaders",wBookHeaders)
context.setProperty("inputIndex",0)
context.setProperty("testSCeRow",null)
}}
catch(Exception e){
log.error e
assert l==2
}
/* 
*This method returns a list by taking parameter inputsheetheadersname
*/

def readDataFromSheet(inputSheetHeadersName){

/*
*Initialising the required variables
*/

int count =0
def configIndustry=testRunner.testCase.testSuite.project.getPropertyValue("Run_Industry").toLowerCase()
def certFlag=testRunner.testCase.testSuite.project.getPropertyValue("CERTFlag").toLowerCase()
def smokeTestFlag=testRunner.testCase.testSuite.project.getPropertyValue("SmokeTestFlag").toLowerCase()
def columns =context.getProperty("columns")
def rows=context.getProperty("rows")
Sheet sheet=context.getProperty("sheet")
Sheet inputSheet= context.getProperty("inputSheet")
workBookHeaders= context.getProperty("workBookHeaders")
def listOfRows=[]
String cellData
String line=""
/* 
*getting the sheet first row headers and adding to list
*/
Cell[] rowCells =sheet.getRow(0)
log.info "Santa"+ rowCells
for(Cell cell:rowCells){
cellData =cell.getContents().toString()
//log.info "gumgumalu"+cellData
int col =cell.getColumn()
if(cellData.equalsIgnoreCase("RunRow")){
context.setProperty("runRowColumn",col)
}
else if(cellData.equalsIgnoreCase("RunCert")){
context.setProperty("runCertColumn",col)
}
else if(cellData.equalsIgnoreCase("RunSmoke")){
context.setProperty("runSmokeColumn",col)
}
else if(cellData.equalsIgnoreCase("TestScenario_ID")&&context.getProperty("testScenarioColumn")==null){
context.setProperty("testScenarioColumn",col)
}
else if(cellData.equalsIgnoreCase("Industry")){
context.setProperty("industryColumn",col)
}



if(cellData ==""){
cellData=" "
}
if (line==""){
line+=cellData
}else{ line+="~"+cellData}
}
def runRowColumn =context.getProperty("runRowColumn")
def runCertColumn =context.getProperty("runcertColumn")
def runSmokeColumn =context.getProperty("runSmokeColumn")
def testScenarioColumn =context.getProperty("testScenarioColumn")
def industryColumn=context.getProperty("industryColumn")
workBookHeaders.put(inputSheetHeadersName,line)
line="";
boolean executeRowFlag =false;
int testSceRow=0
if(context.getProperty("testSceRow")!=null){
testSceRow=context.getProperty("testSceRow")
}

/*
*Looping thru the test data input and putting the workBookHeaders table
/*
 * 
 */
for(int row= testSceRow; row<rows;row++){
runRow=inputSheet.getCell(runRowColumn,row).getContents().trim()
log.info "what is row numv"+row
if(runCertColumn!=null)
runCert=inputSheet.getCell(runCertColumn,row).getContents().trim()
else
runCert="false"
if(runSmokeColumn!=null)
runSmoke=inputSheet.getCell(runSmokeColumn,row).getContents().trim()
else
runSmoke="false"
if(industryColumn!=null)
tCIndustry=inputSheet.getCell(industryColumn,row).getContents().trim().toLowerCase()
else
tCIndustry=configIndustry
String testDataTestSceId=inputSheet.getCell(testScenarioColumn,row).getContents().trim()

if(context.getProperty("testSceRow")== null)

context.setProperty("testSceRow",row)
try{
executeRowFlag =executeRow(configIndustry.contains(tCIndustry),certFlag,smokeTestFlag,runRow,runCert,runSmoke)
}catch(e){
log.error e
}
if(executeRowFlag){
rowCells=sheet.getRow(row)
for (Cell cell:rowCells){
	cellData =cell.getContents().toString()
	if(cellData==""){
		cellData=" "
	}
	if(line==""){
		line+=cellData
	}
	else
		line+="~" +cellData
	
}
listOfRows[count]=line
line=""
count++

}
}
return listOfRows
}
/*
* This method returns  boolean value by taking string parameters tCIndustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke 
*/
def executeRow (tCIindustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke){

boolean exeRow =true
if(!smokeTestFlag.equalsIgnoreCase("true")){
	if(tCIindustry==true){
		if(certFlag.equals("true")&& (runCert.equals("")||runCert.equals("false"))){
			exeRow=false
		}
		else if(certFlag.equals("false")&& runRow.equals("false")){
			exeRow=false
		}
	}else{
		exeRow=false
	}
}
else{
	if(runSmoke.equals("true")){
		if(tCIindustry==false){
			exeRow=false
		}
		
	}else if (runSmoke.equals("false")||runSmoke.equals("")){
		exeRow=false
	}
}
return exeRow
}


 
]]></script></con:config></con:testStep><con:testStep type="groovy" name="LoadRow" id="fd54d311-f4bf-47f0-9784-6785f698876d"><con:settings/><con:config><script><![CDATA[/*
* This script is to read the next row from context variables and sets the same in test case properties
*/
/*
* Intializing the variables
*/
def callingTC = testRunner.getTestCase();
def inputTokens = []
def assertTokens = []
def headerTokens= []
def inputIndex = context.getProperty("inputIndex")
def inputData = context.getProperty("inputData")
def inputHeaders = context.getProperty("workBookHeaders")
def noOfTCs= context.getProperty("noOfTCs")
log.info "ethana test case" + noOfTCs

/*
* Checking workBookHeaders, inputData, noOfTCs
*/

try{
	
	if (context.getProperty("workBookHeaders") != null && context.getProperty("inputData") != null && noOfTCs !=0){
	log.info "wbheadr value"+ context.getProperty("workBookHeaders")
	log.info "wbheadr value"+ context.getProperty("inputData")
	log.info "wbheadr value"+ noOfTCs
/*
* Initializing the variables and getting the header values
*/
		def s=0;
		def headerKeys = inputHeaders.keySet()
		def headerIterator = headerKeys.iterator()
		while (headerIterator.hasNext()){
			headerTokens[s] = inputHeaders.get(headerIterator.next()).split("~")
			s++
		}
		/*
		 Intializing the variables and getting the input data values
		 */
		s=0;
		def inputKeys = inputData.keySet()
		def inputIterator = inputKeys.iterator()
		while (inputIterator.hasNext()){
		inputTokens[s] = (inputData.get(inputIterator.next()))[inputIndex].split("~")	
		s++
		}
		/*
		 * setting the headers as property name and input data as values to property
		 */
		def len = headerTokens.size()
		for(int i=0; i<len; i++){
			def innerLen = headerTokens[i].length
			for (int j=0 ; j<innerLen; j++){
				callingTC.setPropertyValue(headerTokens[i][j].trim(), inputTokens[i][j].trim())
			}
	}
		
}
/*
 * checking the number of test cases to be executed and diverting the executiob to loop
 */
else if (noOfTCs == 0){
	log.info "noOfTCs value is " + noOfTCs + " !! "
	testRunner.gotoStepByName("Loop")
}else{
	log.info "Issue while Reading the Test Data!!"
	testRunner.gotoStepByName("Loop")
}
}
catch(Exception e){
	log.error e
	testRunner.gotoStepByName("Loop")
	assert 1==2
}


]]></script></con:config></con:testStep><con:testStep type="request" id="279c1d7d-d1b0-4ea9-bece-7456180e9d98" name="multiply - Request"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>multiply</con:operation><con:request name="multiply - Request" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="b5aabe70-7086-409d-8e97-696e6c515475"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:multiply>\r
         <cal:x>${#TestCase#ValueA}</cal:x>\r
         <cal:y>${#TestCase#ValueB}</cal:y>\r
      </cal:multiply>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="56e8397d-dc4d-4381-ad1f-1fa8b48fb6b0" name="SOAP Response"/><con:assertion type="Invalid HTTP Status Codes" id="43cabeff-259c-4534-86f4-b977e93593e4" name="Invalid HTTP Status Codes"><con:configuration><codes/></con:configuration></con:assertion><con:assertion type="XPath Match" id="0e3febf7-7393-4bab-b824-b264f18bbe56" name="XPath Match"><con:configuration/></con:assertion><con:assertion type="XPath Match" id="6b7ecfa2-bc34-460e-be52-d952b8e3d455" name="vaLUE"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace n='http://www.parasoft.com/wsdl/calculator/';
//n:Result</path><content>6.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="multiply"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="groovy" name="Generate Detailed Report" id="970889e8-d374-4e1c-b9fd-548cd3760b32"><con:settings/><con:config><script><![CDATA[
//log.info "Test"
import java.math.*;
import jxl.*
import java.util.*;
import groovy.util.*

	//log,info"check"
def testCasename = testRunner.testCase.name

groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def testStepStatus =[];
Date date = new Date()
def dateTime
dateTime = date.format('ddMMyy_hhmmss_S').toString()

double currtime = testRunner.timeTaken;
double time =0.00;
prevTime =0.00;

//calculating test case execution time
if(context.testCaseTimeTaken != null && context.testcaseStatus.size() > 0 && context.inputIndex !=0)
{
	time = currtime - context.prevTime;
}else{
	time = currtime;
}

//Convertint the time into two digit number
double seconds = (time/1000);
try{
	seconds = seconds.round(2);
}catch(e){
	log.info "error: " +e
}

/// Creating a Reports folder if it's not exists
def results = testRunner.results
def resultDir = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ReportsFolderName"));
if(!resultDir.exists())
{
		resultDir.mkdir();
}

//Incrementing the InputIndex value
inputIndex = context.inputIndex;
inputIndex = inputIndex+1;


def detailedReportFileName = context.detailedReportFileName;
Writer writer=null;

//checking detailed report file is already created or not
if(detailedReportFileName == null){
	try
	{
		context.testSteps=0
		context.runners = []
		context.testcasenames = []
		context.testcasedescription = []
		context.filenames = []
		context.testcaseStatus = []
		context.testcaseTimeTaken = []
		context.rowIndex = []
		context.prevTime = 0.00
		context.rowStepCount = 1;

		//Intializing Detailed report
		context.detailedReportFileName = testRunner.testCase.testSuite.name.replace(" ","_")+"_Detailed_Report_"+dateTime +".html";
		log.info "initialising the html report"
		File file = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ProjectReportFolderName")+
		"/"+testRunner.testCase.testSuite.project.name+"/"+context.detailedReportFileName);
		try{
		writer = new FileWriter(file, true);
		}
		catch(Throwable e){
			log.info "writer is not working"+e;
		}

		writer.write("<html>")
		writer.write("<Table border=0 cellSpacing=1 cellPadding=1 width='100%>")
		writer.write("<tr>")
		writer.write("<TD align='left'>")
		//Writer.write("<TD align=right'><img src= '"+groovyUtils.projectPath+"/Logos/Client.jpg' alt='HPS' height='50' width='150'/></TD>")
		writer.write("<TD align='center'><H4 align='center'><font color='660066' face='arial' color='#E0E0E0' size=5><b>Execution Detailed Report</b></font></H4></TD>")
		//Writer.write("<TD align='right'><img src= '"+groovyUtils.projectPath+"/Logos/Cigniti.jpg' alt='Cigniti' height='50' width='150'/>>/TD")
		writer.write("</tr></table>")
		if(null!=context.filenames)
		{
			context.filenames.add("../"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName+"#"+testRunner.testCase.getPropertyValue("Row_Index").toString())
		}
	}catch (Throwable e)
		{
			log.info "error: "+e;
		}
	}
	else
	{
		try
		{
			File file1 = new File(groovyUtils.projectPath+testRunner.testCase.testSuite.project.getPropertyValue("ProjectReportFolderName")+"/"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName);
			writer = new FileWriter(file1,true);
			if(null!=context.filenames)
			{
				context.filenames.add("../"+testRunner.testCase.testSuite.project.name+"/"+detailedReportFileName+"#"+testRunner.testCase.getPropertyValue("RowIndex").toString())
			}
		}
		catch (Throwable e)
		{
			log.info "error: "+e;
		}
	}

	try
	{
		writer.write("<TABLE align=center width=80%><tr><td>")
		writer.write("<TABLE id="+testRunner.testCase.getPropertyValue("Row_Index").toString()+" align=center border=1 cellSpacing=1 cellPadding=1 width=100% font=Arial style=margin-top:60px>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 style=Arial><a name=1></a><B>Test Scenario Name</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("TestScenario_ID").toString())
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>TestCase Description</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("TestScenario_DetailedDescription").toString()+"</b></font></th>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><B>Row Index</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+testRunner.testCase.getPropertyValue("Row_Index").toString()+"</b></font></th>")
		writer.write("<tr><TH bgcolor=#7D5515 align=Center><FONT color=#e0e0e0 size=2 face=Arial><B>Execution Time(Sec)</b></font></th>")
		writer.write("<TH colspan=3 align=Center><FONT color=black size=3 style=Arial><B>"+seconds+"</b></font></th>")
		writer.write("</table></tr></td><tr><td>")

		writer.write("<TABLE align=center border=1 cellSpacing=1 cellPadding=1 width=100% font=Arial>")
		writer.write("<tr>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Step No</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Step</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Request</b></font></th>")
		writer.write("<TH bgcolor=#153e7e align=Center><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Response</b></font></th>")
		writer.write("<TH bgcolor=#153e7e width=10% align=middle><FONT color=#e0e0e0 size=2 face=Arial><a name=1></a><B>Status</b></font></th>")
	}
	
	catch (Throwable e)
		{
			log.info "error: "+e;
		}

boolean flag = false;
intLoopCount1=0;
rowStepCount1 = context.testSteps;

//Looping through results (test Steps)
for( r in testRunner.results )
{
	log.info "inside the test runner r for loop"
	if ( intLoopCount1 >= rowStepCount1)
	{
		if(r.status.toString() != 'OK' && flag == false)
		{
			flag=true;
writer.write("<TH bgcolor=#153e7e align =middle><FONT color =#e0e0e0 size =2 face= Arial><B>Reason</b></font></th>")
}
}
intLoopCount1=intLoopCount1+1;
}
try{
	log.info "inside the try line 159"
writer.write("</tr>")
boolean firstLoop =true;
stepCount=1;
intLoopCount=0;
//def testStepStatus =[];
rowStepCount = context.testSteps;
for(r in testRunner.results)
{
	log.info "inside the second tesrunner results for"
	log.info "value of r" +r;
	log.info "value of intcount"+intLoopCount
	log.info "value of rowStepCount"+rowStepCount
	
if(intLoopCount >= rowStepCount)
{
log.info "inside intloopcount>=rowstepcount"
if( r.getTestStep().config.type=="request" || r.getTestStep().config.type == "restrequest" || r.status.toString()== "FAILED" )
//if(r.testStep.name.toString()!="ReadData"||r.testStep.name.toString()!="LoadRow"||r.testStep.name.toString()!="Loop"||r.testStep.name.toString()!="ReadData"||r.testStep.name.toString()!="LoadRow"||r.testStep.name.toString()!="Delay")
{
log.info "inside going to long if"
writer.write("<tr>")
writer.write("<td align =middle><font color=#153e7e size=2 style=Arial>")
writer.write("step"+stepCount)
writer.write("</font></td>")
writer.write("<td align=left><font color=#153e7e size=2 style=Arial>")
writer.write(r.testStep.name)
writer.write("</font></td>")

def testStep =r.getTestStep();
if(testStep.config.type=="request"|| testStep.config.type=="restrequest")
{
try{
log.info "inside the raw request condition "
def rawRequest=new String(r.rawRequestData);
def rawResponse =new String(r.rawResponseData);

writer.write("<td align=left><font color=#153e7e size=2 style=Arial>")
writer.write("<textarea rows ='20' cols ='40'  style= 'border:none;'>"+ rawRequest+"</textarea>")
writer.write("</font></td>")
writer.write("<td>")
writer.write("<textarea rows ='20' cols ='40'  style= 'border:none;'>"+ rawResponse+"</textarea>")
writer.write("</td>")
}
catch(e){
log.info "error:"+e;
writer.write("<td align=left><font color =#153e7e size=2 style =Arial>")
writer.write("</td>")
writer.write("<td><font color =153e7e size=Arial><font>")
writer.write("</td>")
}
}
else{
	log.info "else part of teststepconfig"
writer.write("<td><font color=#153e7e size=2 style=Arial></font>")
writer.write("<td>")
writer.write("<td><font color=#153e7e size=2 style=Arial></font>")
writer.write("<td>")
}
if(r.status.toString()=="OK" || r.status.toString()=="UNKNOWN")
{
log.info "inside r status=ok"
testStepStatus.add("PASSED")
writer.write("<td width='10%' bgcolor=green align =center><font color=white size =2 style=Arail>")
writer.write("PASSED")
if(flag == true){
	writer.write("</td><font color=#153e7e size=2 style=Arial>")
     writer.write("</font></td>")
}
}
else
{
	log.info"else failed block line 231"
testStepStatus.add("FAILED")
writer.write("<td width ='10%' bgcolor=red align= center><font color=white size=2 style=Arial>")
writer.write(r.status.toString())
writer.write("</td><td align=left><font color=Red size=2 style Arial>")
if(testStep.config.type=="groovy" && context.dBvalidationReason != "" && r.getTestStep().name.toString().contains("Table"))
{
writer.write(context.dBValidationReason)
}
try{
if(testStep.config.type=="request" || testStep.config.type=="restrequest")
{
def error=null;
def errorMessage ="";
Assertioncounter=testStep.getAssertionList().size();
for(AssertionCount in 0..Assertioncounter-1){
if( testStep.getAssertionAt(AssertionCount).getStatus().toString()=="FAILED"){
error=testStep.getAssertionAt(AssertionCount).getErrors()
for (err in error)
{
errorMessage += "<br>"+err.toString()+"; </br>"
}
}
}
writer.write(errorMessage)
}
}
catch(e){
log.info"error:"+e;
writer.write("ERROR: Exception in Request: java.net.soceketTimeoutException:Read timed out");
}
}
writer.write("</font></td>")
writer.write("</tr>")
stepCount =stepCount + 1
}
}
intLoopCount = intLoopCount+1;
}
context.testSteps = testRunner.results.size();
}
catch(Throwable e){
log.info"error:"+e;
}

finally{
writer.write("</table>")
writer.write("</tr></td></table>")
writer.write("<a href ='#top' align='right'><FONT color=#153e7e size=2 face=arial><b>Back to Top</></font></a>")
writer.write("<br/>")
writer.flush();
writer.close();
log.info "inside if after finally block"
if(null!=context.testcaseStatus)
{
log.info "inside if after"	
if(testStepStatus.contains("FAILED"))
{
context.testcaseStatus.add("FAILED")
}
else
{
context.testcaseStatus.add("PASSED")
}
context.testcasedescription.add(testRunner.testCase.getPropertyValue("TestScenario_DetailedDescription"))
}
if(null!=context.testcaseTimeTaken)
{
context.testcaseTimeTaken.add(seconds);
context.prevTime=testRunner.timeTaken;
}
if(null!=context.rowindex)
{
context.rowIndex.add(testRunner.testCase.getPrtopertyValue("Row_Index"));
}
if(null!=context.testcasenames)
{
context.testcasenames.add(testCasename);
}
}
]]></script></con:config></con:testStep><con:testStep type="groovy" name="Loop" id="7196ceca-c104-43fc-bd61-363914d5639f"><con:settings/><con:config><script>/*
 * This Script is to check the row/ test case count executed with the total and loops the execution if any more rows need to be executed
 */
 /*
  * Intializing the variables
  * Here InputIndex value is executed test count and noOfTCs is total test count
  */
  def inputIndex = context.getProperty("inputIndex")
  def noOfTCs = context.getProperty("noOfTCS")

  try{
  	if(context.getProperty("inputIndex") != null){
  		inputIndex += 1 
  		/*
  		 * Check the InputIndex which is executed test count with total count and navigates to the LoadRow if the 
  		 * InputIndex is less than the total count
  		 */
  		 if(inputIndex &lt; noOfTCs){
  		 	context.setProperty("inputIndex", inputIndex)
  		 	testRunner.gotoStepByName("LoadRow")
  		 }
  	}else{
  		log.info "inputIndex context variable is "+inputIndex+" !!"
  	}
  }catch(e){
  log.error e
  }</script></con:config></con:testStep><con:properties><con:property><con:name>Row_Index</con:name><con:value>3</con:value></con:property><con:property><con:name>TestScenario_ID</con:name><con:value>TC02_MultipleScenario</con:value></con:property><con:property><con:name>TestScenario_DetailedDescription</con:name><con:value>Multiply</con:value></con:property><con:property><con:name>Result</con:name><con:value>6.0</con:value></con:property><con:property><con:name>V2</con:name><con:value/></con:property><con:property><con:name>V3</con:name><con:value/></con:property><con:property><con:name>RunRow</con:name><con:value>true</con:value></con:property><con:property><con:name>WorkItem</con:name><con:value>Dummy</con:value></con:property><con:property><con:name>TC_Num</con:name><con:value>3</con:value></con:property><con:property><con:name>TestCaseId</con:name><con:value/></con:property><con:property><con:name>Industry</con:name><con:value>Retail</con:value></con:property><con:property><con:name>ValueA</con:name><con:value>2</con:value></con:property><con:property><con:name>ValueB</con:name><con:value>3</con:value></con:property><con:property><con:name>ValueC</con:name><con:value>6</con:value></con:property></con:properties></con:testCase><con:testCase id="c897afa9-a38f-44ee-aca4-55df8d32427b" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Divide" searchProperties="true"><con:settings/><con:testStep type="request" id="28f57cf9-e403-475d-9f34-47c54497e70d" name="Divide"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>divide</con:operation><con:request name="Divide" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="a6d6f9b1-21cf-4010-8194-3ee80e030fe1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:divide>\r
         <cal:numerator>?</cal:numerator>\r
         <cal:denominator>?</cal:denominator>\r
      </cal:divide>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="c155d4c9-d124-418d-8cf4-ef931d1f000d" name="SOAP Response"/><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="divide"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="26de8879-11f3-472a-81cd-9d491e7d6462" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Add- Negative with Character" searchProperties="true"><con:settings/><con:testStep type="request" id="aa9ec20f-7e8f-4d2e-aa65-edae696f1f06" name="add - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>add</con:operation><con:request name="add - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="48b7699a-a250-4f3a-9381-21ca66bafada"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:add>\r
         <cal:x></cal:x>\r
         <cal:y>7</cal:y>\r
      </cal:add>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="6b798bf9-8478-4bc6-a4fb-591c834daf95" name="SOAP Response"/><con:assertion type="Invalid HTTP Status Codes" id="a799874c-28d0-4048-8b8b-991867cb0168" name="Invalid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="add"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:testCase id="8346b346-eb49-4b82-8afa-8d39a518d4ab" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Multiply" searchProperties="true"><con:settings/><con:properties/></con:testCase><con:testCase id="725abea9-24cf-4a6d-9ef6-bbdf83220162" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Subtract" searchProperties="true"><con:settings/><con:testStep type="request" id="cebe24bb-cb11-487d-868d-781af2abdf02" name="subtract - Request 1"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>ICalculator</con:interface><con:operation>subtract</con:operation><con:request name="subtract - Request 1" outgoingWss="" incomingWss="" timeout="" sslKeystore="" useWsAddressing="false" useWsReliableMessaging="false" wssPasswordType="" id="303d4326-3857-4ca2-80b9-313aeec695c8"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>http://ws1.parasoft.com/glue/calculator</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:cal="http://www.parasoft.com/wsdl/calculator/">\r
   <soapenv:Header/>\r
   <soapenv:Body>\r
      <cal:subtract>\r
         <cal:x>6</cal:x>\r
         <cal:y>9</cal:y>\r
      </cal:subtract>\r
   </soapenv:Body>\r
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="9279bd2d-16cb-4037-88b4-93b1078b6f69" name="SOAP Response"/><con:assertion type="XPath Match" id="2a788491-5141-48dd-b0f2-c95643dec755" name="XPath Match"><con:configuration><path>declare namespace soap='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace n='http://www.parasoft.com/wsdl/calculator/';
//n:Result</path><content>-3.0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="subtract"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/></con:testCase><con:properties><con:property><con:name>InputFileName</con:name><con:value>Add.xls</con:value></con:property><con:property><con:name>InputSheet</con:name><con:value>Calc_Input</con:value></con:property></con:properties><con:setupScript><![CDATA[/*
 * This script is to initialise the test suite detailed report
 * and does the archiving of existing reports the existing reports woulid be moved to Reports Archive folder
 * 
 * Also this script reads the test dsata and stores into context variabkes wotrkbookdata,workbookheaders
 */
import jxl.*
/*
 * Initialising the variable
 */
 groovyUtils=new com.eviware.soapui.support.GroovyUtils(context)
 projectPath=groovyUtils.projectPath
 context.testSteps=0
 context.runners=[]
 context.testcasenames=[]
 context.testcasedescription=[]
 context.filenames=[]
 context.testcaseStatus=[]
 context.testcasesTimetaken=[]
 context.rowIndex=[]
 context.prevTime=0.00
 Date date =new Date()
 dateTime =date.format('ddMMyy_hhmmss_S').toString()

 /*
  * creating folder  with the name of project name inside reports if its not exists
  */
 folderCreate=new File(projectPath+testSuite.project.getPropertyValue("ProjectReportFolderName")+"/"+testSuite.project.name);
 if(!folderCreate.exists()){
 	folderCreate.mkdirs();
 }
 /*
  * Moving Existing reports into reports_Archieve folder
  * 
  */
 try{
 	def projectReportFilePath=testSuite.project.getPropertyValue("ProjectReportFolderName")+"\\"+testSuite.project.name.toString()
    def archiveReportFilePath=testSuite.project.getPropertyValue("ArchivedReportsFolderName")+"\\"+tesrSuite.project.name.toString()
    File projectReportFile =new File(projectPath+"\\"+projectReportFilePath);
    File [] listOfFiles;
    listOfFiles=projectReportFile.listFiles();
    if(listOfFiles!=null)

    for(int i=0;i<listOfFiles.length;i++){
    	def filename=listOfFiles[i].getName();
    	if(filename.startsWith(testSuite.name.toString().replace("","_"))){
    		projectReportFile=new File(projectPath+"\\"+projectReportFilePath+"\\"+filename)
    		if(!new File(projectPath+"\\"+archiverReportFilePath).exists()){
    			new File(projectPath+"\\"+archiverReportFilePath).mkdirs();
    		}
    		projectReportFile.renameTo(new File(projectPath+"\\"+archiverReportFilePath+"\\"+projectReportFile.getName()))
    	}
    }
    log.info "Test Suite Reports archived success"
 }
 catch(Throwable e){
 log.error e;
 log.info "Test Suite Reports not Archived"	   
 }
 /* 
  *  initialising the test Suite detailed reports
  */
try{
	def detailedReportFileName=testSuite.name.replace(" ","_")+"_Detailed_Report_"+dateTime+".html"
	context.detailedReportFileName =detailedReportFileName
	def detailedReportFilePath=groovyUtils.projectPath+testSuite.project.getPropertyValue("projectReportFolderName")+"/"+testSuite.project.name+"/"+detailedReportFileName
	File file =new File(detailedReportFilePath);
	Writer writer=null;
	writer =new FileWriter(file,true);
	/*
	 * Adding headers to the deatiled report
	 */
		 writer.write("<html>")
		writer.write("<Table border=0 cellSpacing=1 cellPadding=1 width='100%>")
		writer.write("<tr>")
		writer.write("<TD align='left'>")
		//Writer.write("<TD align=right'><img src= '"+groovyUtils.projectPath+"/Logos/Client.jpg' alt='HPS' height='50' width='150'/></TD>")
		writer.write("<TD align='center'><H4 align='center'><font color='660066' face='arial' color='#E0E0E0' size=5><b>Execution Detailed Report</b></font></H4></TD>")
		//Writer.write("<TD align='right'><img src= '"+groovyUtils.projectPath+"/Logos/Cigniti.jpg' alt='Cigniti' height='50' width='150'/>>/TD")
		writer.write("</tr></table>")
		writer.write("<br/>")
		writer.flush();
		writer.close();
}catch(Throwable e){
log.error e;}
/*
 * starting of reading the test data workbook
 */
 try{  
 def workBookData= new Hashtable()
 def workBookHeaders = new Hashtable()
 def listNm=""
def headingNm =""
int columns=0
int rows=0
def testData =testRunner.testCase.testSuite.project.getPropertyValue("TestDataFolder")
def testDataWorkBook =testRunner.testCase.testSuite.project.getPropertyValue("InputFileName")
def filePath = projectPath+"\\"+testData+"\\"+testDataWorkBook

Workbook workBook = Workbook.getWorkbook(new File(filePath))
Sheet sheet
context.setProperty("workBookData",workBookData)
context.setProperty("workBookHeaders",workBookHeaders)

String [] sheetNames=workBook.getSheetNames()


/*Excluding the specific sheets whaich are in test data
*/ 
String excludesheetNames=testRunner.testCase.testSuite.project.getPropertyValue("ExcludeTestDataSheetNames")
log.info excludesheetNames
/*
*Looping thru tet data worksheets  to read the data
*/

for(int i=0;i<workBook.getNumberOfSheets();i++){
tempInputList=[]
if(!excludesheetNames.contains(sheetNames[i].toString())){
inputSheet=workBook.getSheet(""+testRunner.testCase.testSuite.getPropertyValue("InputSheet").toString())

/*Varied input sheets */
sheet =workBook.getSheet(i)

columns =sheet.getColumns()

rows =sheet.getRows()

context.setProperty("inputSheet",inputSheet)
context.setProperty("sheet",sheet)
context.setProperty("columns",columns)
context.setProperty("rows",rows)
inputSheetName ="inputSheetData" +i
inputSheetHeadersName="inputSheetHeadersName"+i

try{
/*
* Calling the method readDataFromSheet
*/

tempInputList =readDataFromSheet(inputSheetHeadersName)
//log.info "Sant" + tempInputList
}catch(e){
log.error e;
}
/*
*Putting the list in workBookData  hash table  with the key inputSheetName
*/

workBookData.put(inputSheetName,tempInputList)
context.setProperty("workBookData",workBookData)
}
}
}catch( Throwable e ){
	log.error e;
}
//log.info "NOt Read the Test Data"


/* 
*This method returns a list by taking parameter inputsheetheadersname
*/

def readDataFromSheet(inputSheetHeadersName){

/*
*Initialising the required variables
*/

int count =0
def configIndustry=testRunner.testCase.testSuite.project.getPropertyValue("Run_Industry").toLowerCase()
def certFlag=testRunner.testCase.testSuite.project.getPropertyValue("CERTFlag").toLowerCase()
def smokeTestFlag=testRunner.testCase.testSuite.project.getPropertyValue("SmokeTestFlag").toLowerCase()
def columns =context.getProperty("columns")
def rows=context.getProperty("rows")
Sheet sheet=context.getProperty("sheet")
Sheet inputSheet= context.getProperty("inputSheet")
workBookHeaders= context.getProperty("workBookHeaders")
def listOfRows=[]
String cellData
String line=""
/* 
*getting the sheet first row headers and adding to list
*/
Cell[] rowCells =sheet.getRow(0)
log.info "Santa"+ rowCells
for(Cell cell:rowCells){
cellData =cell.getContents().toString()
//log.info "gumgumalu"+cellData
int col =cell.getColumn()
if(cellData.equalsIgnoreCase("RunRow")){
context.setProperty("runRowColumn",col)
}
else if(cellData.equalsIgnoreCase("RunCert")){
context.setProperty("runCertColumn",col)
}
else if(cellData.equalsIgnoreCase("RunSmoke")){
context.setProperty("runSmokeColumn",col)
}
else if(cellData.equalsIgnoreCase("TestScenario_ID")&&context.getProperty("testScenarioColumn")==null){
context.setProperty("testScenarioColumn",col)
}
else if(cellData.equalsIgnoreCase("Industry")){
context.setProperty("industryColumn",col)
}



if(cellData ==""){
cellData=" "
}
if (line==""){
line+=cellData
}else{ line+="~"+cellData}
}
def runRowColumn =context.getProperty("runRowColumn")
def runCertColumn =context.getProperty("runcertColumn")
def runSmokeColumn =context.getProperty("runSmokeColumn")
def testScenarioColumn =context.getProperty("testScenarioColumn")
def industryColumn=context.getProperty("industryColumn")
workBookHeaders.put(inputSheetHeadersName,line)
line="";
boolean executeRowFlag =false;
int testSceRow=0
if(context.getProperty("testSceRow")!=null){
testSceRow=context.getProperty("testSceRow")
}

/*
*Looping thru the test data input and putting the workBookHeaders table
/*
 * 
 */
for(int row= testSceRow; row<rows;row++){
runRow=inputSheet.getCell(runRowColumn,row).getContents().trim()
log.info "what is row numv"+row
if(runCertColumn!=null)
runCert=inputSheet.getCell(runCertColumn,row).getContents().trim()
else
runCert="false"
if(runSmokeColumn!=null)
runSmoke=inputSheet.getCell(runSmokeColumn,row).getContents().trim()
else
runSmoke="false"
if(industryColumn!=null)
tCIndustry=inputSheet.getCell(industryColumn,row).getContents().trim().toLowerCase()
else
tCIndustry=configIndustry
String testDataTestSceId=inputSheet.getCell(testScenarioColumn,row).getContents().trim()

if(context.getProperty("testSceRow")== null)

context.setProperty("testSceRow",row)
try{
executeRowFlag =executeRow(configIndustry.contains(tCIndustry),certFlag,smokeTestFlag,runRow,runCert,runSmoke)
}catch(e){
log.error e
}
if(executeRowFlag){
rowCells=sheet.getRow(row)
for (Cell cell:rowCells){
	cellData =cell.getContents().toString()
	if(cellData==""){
		cellData=" "
	}
	if(line==""){
		line+=cellData
	}
	else
		line+="~" +cellData
	
}
listOfRows[count]=line
line=""
count++

}
}
return listOfRows
}
/*
* This method returns  boolean value by taking string parameters tCIndustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke 
*/
def executeRow (tCIindustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke){

boolean exeRow =true
if(!smokeTestFlag.equalsIgnoreCase("true")){
	if(tCIindustry==true){
		if(certFlag.equals("true")&& (runCert.equals("")||runCert.equals("false"))){
			exeRow=false
		}
		else if(certFlag.equals("false")&& runRow.equals("false")){
			exeRow=false
		}
	}else{
		exeRow=false
	}
}
else{
	if(runSmoke.equals("true")){
		if(tCIindustry==false){
			exeRow=false
		}
		
	}else if (runSmoke.equals("false")||runSmoke.equals("")){
		exeRow=false
	}
}
return exeRow
}

]]></con:setupScript></con:testSuite><con:testSuite id="f3ba22d5-5e4a-4ca1-92d8-f26220a1f2bc" name="Reusable"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="54457730-5fca-4c18-bb9f-3d9047c23e20" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Commonfunction" searchProperties="true"><con:settings/><con:testStep type="groovy" name="Readingdata" id="1e05387c-2cb1-431b-a7c5-3ba270f34832"><con:settings/><con:config><script><![CDATA[/*
* This script is to read the test data if the context variables are null and stores into context varaibles workBookData,workBookHeaders
*/

import jxl.*

/*
*Initialising the variables
*/

def groovyUtils =new com.eviware.soapui.support.GroovyUtils(context)
//def projectPath  = "F:\\Thilak\\web services"
log.info groovyUtils.projectPath
def projectPath =groovyUtils.projectPath
log.info groovyUtils.projectPath
def workBookData = new Hashtable()
def workBookHeaders = new Hashtable()
def inputData= new Hashtable()
def inputHeaders= new Hashtable()

try{
/*
* Checcking context variables null or not
* If this condition  is true will read the test data and stores the data in context variables workBookData,workBookHeaders
*If this condition is false willreuse the already read data at test suite level from context variables
*/

if(context.getProperty("workBookData")==null|| context.getProperty("workBookHeaders")==null){
log.info "First Time  reading the workbook!!"
//Initialising the required varaibles

def testData =testRunner.testCase.testSuite.project.getPropertyValue("TestDataFolder")
log.info testData
def testDataWorkBook =testRunner.testCase.testSuite.project.getPropertyValue("InputFileName")
log.info testDataWorkBook
def filePath = projectPath+"\\"+testData+"\\"+testDataWorkBook
log.info filePath
Workbook workBook = Workbook.getWorkbook(new File(filePath))
log.info workBook
def listNm=""
def headingNm =""
int columns=0
int rows=0
Sheet sheet
context.setProperty("workBookData",workBookData)
context.setProperty("workBookHeaders",workBookHeaders)

String [] sheetNames=workBook.getSheetNames()
log.info "+Test+" + sheetNames

/*Excluding the specific sheets whaich are in test data
*/ 
String excludesheetNames=testRunner.testCase.testSuite.project.getPropertyValue("ExcludeTestDataSheetNames")
log.info excludesheetNames
/*
*Looping thru tet data worksheets  to read the data
*/

for(int i=0;i<workBook.getNumberOfSheets();i++){
tempInputList=[]
if(!excludesheetNames.contains(sheetNames[i].toString())){
inputSheet=workBook.getSheet(""+testRunner.testCase.testSuite.getPropertyValue("InputSheet").toString())

/*Varied input sheets */
sheet =workBook.getSheet(i)

columns =sheet.getColumns()

rows =sheet.getRows()

context.setProperty("inputSheet",inputSheet)
context.setProperty("sheet",sheet)
context.setProperty("columns",columns)
context.setProperty("rows",rows)
inputSheetName ="inputSheetData" +i
inputSheetHeadersName="inputSheetHeadersName"+i

try{
/*
* Calling the method readDataFromSheet
*/

tempInputList =readDataFromSheet(inputSheetHeadersName)
log.info "Sant" + tempInputList
}catch(e){
log.error e
}

/*
*Putting the list in workBookData  hash table  with the key inputSheetName
*/

workBookData.put(inputSheetName,tempInputList)
context.setProperty("workBookData",workBookData)
	}
}

/* 
* Initialising  the workBookData,workBookHeaders context variables
*/

def wBookData=context.getProperty("workBookData")
def wBookHeaders=context.getProperty("workBookHeaders")

def keys =wBookData.keySet()
def keyiterator = keys.iterator()
def sh1
for(String key:keys){
def sheet1=wBookData.get(key)
sh1=[]
Iterator<String> iter1 =sheet1.iterator()
while(iter1.hasNext()){
String str =iter1.next();
if(str.contains(testRunner.testCase.name)){
sh1.add(str)
}
}
inputData.put(key,sh1)
log.info "yaaru sh1"+ sh1.size
context.setProperty("noOfTCs",sh1.size())

}
/*
*storing to context variables
*/

context.setProperty("inputData",inputData)
context.setProperty("inputHeaders",wBookHeaders)
context.setProperty("inputIndex",0)
context.setProperty("testSCeRow",null)
}}
catch(Exception e){
log.error e
assert l==2
}
/* 
*This method returns a list by taking parameter inputsheetheadersname
*/

def readDataFromSheet(inputSheetHeadersName){

/*
*Initialising the required variables
*/

int count =0
def configIndustry=testRunner.testCase.testSuite.project.getPropertyValue("Run_Industry").toLowerCase()
def certFlag=testRunner.testCase.testSuite.project.getPropertyValue("CERTFlag").toLowerCase()
def smokeTestFlag=testRunner.testCase.testSuite.project.getPropertyValue("SmokeTestFlag").toLowerCase()
def columns =context.getProperty("columns")
def rows=context.getProperty("rows")
Sheet sheet=context.getProperty("sheet")
Sheet inputSheet= context.getProperty("inputSheet")
workBookHeaders= context.getProperty("workBookHeaders")
def listOfRows=[]
String cellData
String line=""
/* 
*getting the sheet first row headers and adding to list
*/
Cell[] rowCells =sheet.getRow(0)
log.info "Santa"+ rowCells
for(Cell cell:rowCells){
cellData =cell.getContents().toString()
//log.info "gumgumalu"+cellData
int col =cell.getColumn()
if(cellData.equalsIgnoreCase("RunRow")){
context.setProperty("runRowColumn",col)
}
else if(cellData.equalsIgnoreCase("RunCert")){
context.setProperty("runCertColumn",col)
}
else if(cellData.equalsIgnoreCase("RunSmoke")){
context.setProperty("runSmokeColumn",col)
}
else if(cellData.equalsIgnoreCase("TestScenario_ID")&&context.getProperty("testScenarioColumn")==null){
context.setProperty("testScenarioColumn",col)
}
else if(cellData.equalsIgnoreCase("Industry")){
context.setProperty("industryColumn",col)
}



if(cellData ==""){
cellData=" "
}
if (line==""){
line+=cellData
}else{ line+="~"+cellData}
}
def runRowColumn =context.getProperty("runRowColumn")
def runCertColumn =context.getProperty("runcertColumn")
def runSmokeColumn =context.getProperty("runSmokeColumn")
def testScenarioColumn =context.getProperty("testScenarioColumn")
def industryColumn=context.getProperty("industryColumn")
workBookHeaders.put(inputSheetHeadersName,line)
line="";
boolean executeRowFlag =false;
int testSceRow=0
if(context.getProperty("testSceRow")!=null){
testSceRow=context.getProperty("testSceRow")
}

/*
*Looping thru the test data input and putting the workBookHeaders table
/*
 * 
 */
for(int row= testSceRow; row<rows;row++){
runRow=inputSheet.getCell(runRowColumn,row).getContents().trim()
log.info "what is row numv"+row
if(runCertColumn!=null)
runCert=inputSheet.getCell(runCertColumn,row).getContents().trim()
else
runCert="false"
if(runSmokeColumn!=null)
runSmoke=inputSheet.getCell(runSmokeColumn,row).getContents().trim()
else
runSmoke="false"
if(industryColumn!=null)
tCIndustry=inputSheet.getCell(industryColumn,row).getContents().trim().toLowerCase()
else
tCIndustry=configIndustry
String testDataTestSceId=inputSheet.getCell(testScenarioColumn,row).getContents().trim()

if(context.getProperty("testSceRow")== null)

context.setProperty("testSceRow",row)
try{
executeRowFlag =executeRow(configIndustry.contains(tCIndustry),certFlag,smokeTestFlag,runRow,runCert,runSmoke)
}catch(e){
log.error e
}
if(executeRowFlag){
rowCells=sheet.getRow(row)
for (Cell cell:rowCells){
	cellData =cell.getContents().toString()
	if(cellData==""){
		cellData=" "
	}
	if(line==""){
		line+=cellData
	}
	else
		line+="~" +cellData
	
}
listOfRows[count]=line
line=""
count++

}
}
return listOfRows
}
/*
* This method returns  boolean value by taking string parameters tCIndustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke 
*/
def executeRow (tCIindustry,certFlag,smokeTestFlag,runRow,runCert,runSmoke){

boolean exeRow =true
if(!smokeTestFlag.equalsIgnoreCase("true")){
	if(tCIindustry==true){
		if(certFlag.equals("true")&& (runCert.equals("")||runCert.equals("false"))){
			exeRow=false
		}
		else if(certFlag.equals("false")&& runRow.equals("false")){
			exeRow=false
		}
	}else{
		exeRow=false
	}
}
else{
	if(runSmoke.equals("true")){
		if(tCIindustry==false){
			exeRow=false
		}
		
	}else if (runSmoke.equals("false")||runSmoke.equals("")){
		exeRow=false
	}
}
return exeRow
}


 
]]></script></con:config></con:testStep><con:testStep type="groovy" name="LoadingRow" id="01016237-c414-463f-8402-b8f21da62c4b"><con:settings/><con:config><script><![CDATA[/*
* This script is to read the next row from context variables and sets the same in test case properties
*/
/*
* Intializing the variables
*/
def callingTC = testRunner.getTestCase();
def inputTokens = []
def assertTokens = []
def headerTokens= []
def inputIndex = context.getProperty("inputIndex")
def inputData = context.getProperty("inputData")
def inputHeaders = context.getProperty("workBookHeaders")
def noOfTCs= context.getProperty("noOfTCs")
log.info "ethana test case" + noOfTCs

/*
* Checking workBookHeaders, inputData, noOfTCs
*/

try{
	
	if (context.getProperty("workBookHeaders") != null && context.getProperty("inputData") != null && noOfTCs !=0){
	log.info "wbheadr value"+ context.getProperty("workBookHeaders")
	log.info "wbheadr value"+ context.getProperty("inputData")
	log.info "wbheadr value"+ noOfTCs
/*
* Initializing the variables and getting the header values
*/
		def s=0;
		def headerKeys = inputHeaders.keySet()
		def headerIterator = headerKeys.iterator()
		while (headerIterator.hasNext()){
			headerTokens[s] = inputHeaders.get(headerIterator.next()).split("~")
			s++
		}
		/*
		 Intializing the variables and getting the input data values
		 */
		s=0;
		def inputKeys = inputData.keySet()
		def inputIterator = inputKeys.iterator()
		while (inputIterator.hasNext()){
		inputTokens[s] = (inputData.get(inputIterator.next()))[inputIndex].split("~")	
		s++
		}
		/*
		 * setting the headers as property name and input data as values to property
		 */
		def len = headerTokens.size()
		for(int i=0; i<len; i++){
			def innerLen = headerTokens[i].length
			for (int j=0 ; j<innerLen; j++){
				callingTC.setPropertyValue(headerTokens[i][j].trim(), inputTokens[i][j].trim())
			}
	}
		
}
/*
 * checking the number of test cases to be executed and diverting the executiob to loop
 */
else if (noOfTCs == 0){
	log.info "noOfTCs value is " + noOfTCs + " !! "
	testRunner.gotoStepByName("Loop")
}else{
	log.info "Issue while Reading the Test Data!!"
	testRunner.gotoStepByName("Loop")
}
}
catch(Exception e){
	log.error e
	testRunner.gotoStepByName("Loop")
	assert 1==2
}


]]></script></con:config></con:testStep><con:testStep type="groovy" name="LoopingData" id="080f343d-ced7-4c0e-98b9-bc6ce1aaa1ae"><con:settings/><con:config><script>/*
 * This Script is to check the row/ test case count executed with the total and loops the execution if any more rows need to be executed
 */
 /*
  * Intializing the variables
  * Here InputIndex value is executed test count and noOfTCs is total test count
  */
  def inputIndex = context.getProperty("inputIndex")
  def noOfTCs = context.getProperty("noOfTCS")

  try{
  	if(context.getProperty("inputIndex") != null){
  		inputIndex += 1 
  		/*
  		 * Check the InputIndex which is executed test count with total count and navigates to the LoadRow if the 
  		 * InputIndex is less than the total count
  		 */
  		 if(inputIndex &lt; noOfTCs){
  		 	context.setProperty("inputIndex", inputIndex)
  		 	testRunner.gotoStepByName("LoadRow")
  		 }
  	}else{
  		log.info "inputIndex context variable is "+inputIndex+" !!"
  	}
  }catch(e){
  log.error e
  }</script></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:properties><con:property><con:name>workBookHeaders</con:name><con:value/></con:property><con:property><con:name>workBookData</con:name><con:value/></con:property><con:property><con:name>UserCredSheetName</con:name><con:value>UserCredentials</con:value></con:property><con:property><con:name>TestDataFolder</con:name><con:value>TestData</con:value></con:property><con:property><con:name>SmokeTestFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>Run_Industry</con:name><con:value>Retail</con:value></con:property><con:property><con:name>RunID</con:name><con:value>Athiraj_091618_053613_148</con:value></con:property><con:property><con:name>InputFileName</con:name><con:value>Add.xls</con:value></con:property><con:property><con:name>HostName</con:name><con:value>RAJTHIALK-PC</con:value></con:property><con:property><con:name>GPFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>GNAPUKFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>ExcludeTestDataSheetNames</con:name><con:value>ChangeLog</con:value></con:property><con:property><con:name>EnvironmentSheetName</con:name><con:value>Environment</con:value></con:property><con:property><con:name>Environment</con:name><con:value>UAT</con:value></con:property><con:property><con:name>EndPoint</con:name><con:value>www.abc.com</con:value></con:property><con:property><con:name>ConfigFileName</con:name><con:value>PaymentServer_ConfigFile.xls</con:value></con:property><con:property><con:name>ConfigFileFolderName</con:name><con:value>Config</con:value></con:property><con:property><con:name>CERTFlag</con:name><con:value>false</con:value></con:property><con:property><con:name>ReportsFolderName</con:name><con:value>/Reports/add</con:value></con:property><con:property><con:name>ProjectReportFolderName</con:name><con:value>/Reports</con:value></con:property></con:properties><con:afterLoadScript><![CDATA[import jxl.*
//Config File Setup
def groovyUtils= new com.eviware.soapui.support.GroovyUtils(context)
def projectPath = groovyUtils.projectPath
log.info projectPath
boolean isHostFound=false
//Getting HostName
String hostName =java.net.InetAddress.getLocalHost().getHostName().toUpperCase()
log.info hostName

def configFileFolder=project.getPropertyValue("ConfigFileFolderName")
log.info configFileFolder
def file=project.getPropertyValue("ConfigFileName")
log.info file
def userCredSheet=project.getPropertyValue("UserCredSheetName")
log.info userCredSheet
def envSheet=project.getPropertyValue("EnvironmentSheetName")
log.info envSheet
filePath=projectPath+"\\"+configFileFolder+"\\"+file
log.info "Config File Path:"+filePath
try{
Workbook wb = Workbook.getWorkbook(new File(filePath))
Sheet sheet=null
def headers=""
def values=""
String line=""
String data=""
for(int sheetNo=0;sheetNo<wb.getNumberOfSheets();sheetNo++)
{
sheet=wb.getSheet(sheetNo)
context.setProperty("sheet",sheet)
//Fetching user credentials
if(sheet.getName().trim().equalsIgnoreCase(envSheet))
{
headers=ReadHeaders(envSheet,hostName)
//log.info headers.toString()
values=ReadValues(envSheet,hostName)
//log.info values.toString()
SetProperties(headers,values)
}
else if(sheet.getName().trim().equalsIgnoreCase(userCredSheet))
{
headers=ReadHeaders(userCredSheet,hostName)
values=ReadValues(userCredSheet,hostName)
SetProperties(headers,values)
}
}
log.info "Loaded the config file!!"
}catch(Exception e){
log.error e
log.error "Not Loaded the Config file"
}
def ReadValues(sheetName,hostName)
{
sheet=context.getProperty("sheet")
int columns =sheet.getColumns()
int rows =sheet.getRows()
boolean isHostFound=false
def values=""
def line=""
for(int col=0;col<columns;col++)
{
if(sheet.getCell(col,0).getContents().equalsIgnoreCase(hostName))
{
for(int row=0;row<rows;row++)
{
data=sheet.getCell(col,row).getContents() + ","
line+=data
}
if(line.length()>0 && line.charAt(line.length()-1)==",")
{
line=line.substring(0,line.length()-1)
}
if (line.length() > 0 && line.charAt(line.length()-1)==',')
{
line=line+" "
}
values= line
line=""
isHostFound=true
}
if(isHostFound)
{
log.info "HostName Found is "+sheetName+" Sheet!!"
break
}
}
if(!isHostFound)
{
log.error "HostName Not Found in "+sheetName+" Sheet!!"
}
//log.info values
return values
}
def ReadHeaders(sheetName, hostName)
{
sheet=context.getProperty("sheet")
int rows =sheet.getRows()
def values =""
def line =""
for(int row=0;row<rows;row++)
{
data=sheet.getCell(0,row).getContents()+","
line+=data
}
if(line.length()>0 && line.charAt(line.length()-1)==',')
{
line=line.substring(0,line.length()-1)
}
if(line.length() >0 && line.charAt(line.length()-1)==',')
{
line=line+" "
}
headers=line
line=""
//log.info headers
return headers
}

def SetProperties(headers,values)
{
if(values!="")
{log.info "inside the Set Propertes"+ values
def header =headers.split(",")
def value= values.split(",")
for (int count=0;count<header.length;count++)
{
log.info header
log.info value
def headerName=header[count]
def actualValue =value[count]
log.info headerName+":"+actualValue
project.setPropertyValue(headerName,actualValue)
}
}
}
//creating RunId with format windowusername_system and current time
String userName=System.getProperty("user.name")
log.info userName
Date date = new Date()
dateTime=date.format('MMddyy_hhmmss_S').toString()
runID = userName + "_" +dateTime
log.info"RunID:"+runID
project.setPropertyValue("RunID",runID)
 ]]></con:afterLoadScript><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>